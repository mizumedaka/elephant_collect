
elephant_collect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bec  08003bec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bec  08003bec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bec  08003bec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003c00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003c00  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2b5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002313  00000000  00000000  0003b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0003d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  0003e128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a915  00000000  00000000  0003fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d73c  00000000  00000000  0005a3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afae6  00000000  00000000  00067b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001175f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec0  00000000  00000000  00117648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00006eec  00000000  00000000  0011a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b98 	.word	0x08003b98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003b98 	.word	0x08003b98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 fc27 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f80d 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f949 	bl	80003f0 <MX_GPIO_Init>
  MX_CAN_Init();
 800015e:	f000 f84f 	bl	8000200 <MX_CAN_Init>
  MX_TIM1_Init();
 8000162:	f000 f881 	bl	8000268 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  main_cpp();
 8000166:	f001 fb5f 	bl	8001828 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  [[maybe_unused]] volatile int dummy = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  dummy = 0;
 800016e:	2300      	movs	r3, #0
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	e7fc      	b.n	800016e <main+0x22>

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f003 fd00 	bl	8003b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fa7f 	bl	80026c0 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c8:	f000 f940 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fcec 	bl	8002bc4 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f2:	f000 f92b 	bl	800044c <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <MX_CAN_Init+0x60>)
 8000206:	4a17      	ldr	r2, [pc, #92]	; (8000264 <MX_CAN_Init+0x64>)
 8000208:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800020a:	4b15      	ldr	r3, [pc, #84]	; (8000260 <MX_CAN_Init+0x60>)
 800020c:	2210      	movs	r2, #16
 800020e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <MX_CAN_Init+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <MX_CAN_Init+0x60>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <MX_CAN_Init+0x60>)
 800021e:	2200      	movs	r2, #0
 8000220:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <MX_CAN_Init+0x60>)
 8000224:	2200      	movs	r2, #0
 8000226:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <MX_CAN_Init+0x60>)
 800022a:	2200      	movs	r2, #0
 800022c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800022e:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MX_CAN_Init+0x60>)
 8000230:	2200      	movs	r2, #0
 8000232:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <MX_CAN_Init+0x60>)
 8000236:	2200      	movs	r2, #0
 8000238:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <MX_CAN_Init+0x60>)
 800023c:	2200      	movs	r2, #0
 800023e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <MX_CAN_Init+0x60>)
 8000242:	2200      	movs	r2, #0
 8000244:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <MX_CAN_Init+0x60>)
 8000248:	2200      	movs	r2, #0
 800024a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <MX_CAN_Init+0x60>)
 800024e:	f001 fc2f 	bl	8001ab0 <HAL_CAN_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000258:	f000 f8f8 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000028 	.word	0x20000028
 8000264:	40006400 	.word	0x40006400

08000268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b096      	sub	sp, #88	; 0x58
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]
 8000296:	615a      	str	r2, [r3, #20]
 8000298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2220      	movs	r2, #32
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 fc71 	bl	8003b88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002a6:	4b50      	ldr	r3, [pc, #320]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002a8:	4a50      	ldr	r2, [pc, #320]	; (80003ec <MX_TIM1_Init+0x184>)
 80002aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 143;
 80002ac:	4b4e      	ldr	r3, [pc, #312]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002ae:	228f      	movs	r2, #143	; 0x8f
 80002b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b2:	4b4d      	ldr	r3, [pc, #308]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80002b8:	4b4b      	ldr	r3, [pc, #300]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80002be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c0:	4b49      	ldr	r3, [pc, #292]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c6:	4b48      	ldr	r3, [pc, #288]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002cc:	4b46      	ldr	r3, [pc, #280]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002d2:	4845      	ldr	r0, [pc, #276]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002d4:	f002 fdfa 	bl	8002ecc <HAL_TIM_Base_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80002de:	f000 f8b5 	bl	800044c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ec:	4619      	mov	r1, r3
 80002ee:	483e      	ldr	r0, [pc, #248]	; (80003e8 <MX_TIM1_Init+0x180>)
 80002f0:	f002 fff4 	bl	80032dc <HAL_TIM_ConfigClockSource>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80002fa:	f000 f8a7 	bl	800044c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002fe:	483a      	ldr	r0, [pc, #232]	; (80003e8 <MX_TIM1_Init+0x180>)
 8000300:	f002 fe33 	bl	8002f6a <HAL_TIM_PWM_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800030a:	f000 f89f 	bl	800044c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000316:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800031a:	4619      	mov	r1, r3
 800031c:	4832      	ldr	r0, [pc, #200]	; (80003e8 <MX_TIM1_Init+0x180>)
 800031e:	f003 fb45 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000328:	f000 f890 	bl	800044c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800032c:	2360      	movs	r3, #96	; 0x60
 800032e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000334:	2300      	movs	r3, #0
 8000336:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000338:	2300      	movs	r3, #0
 800033a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000344:	2300      	movs	r3, #0
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800034c:	2200      	movs	r2, #0
 800034e:	4619      	mov	r1, r3
 8000350:	4825      	ldr	r0, [pc, #148]	; (80003e8 <MX_TIM1_Init+0x180>)
 8000352:	f002 ff05 	bl	8003160 <HAL_TIM_PWM_ConfigChannel>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800035c:	f000 f876 	bl	800044c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000364:	2204      	movs	r2, #4
 8000366:	4619      	mov	r1, r3
 8000368:	481f      	ldr	r0, [pc, #124]	; (80003e8 <MX_TIM1_Init+0x180>)
 800036a:	f002 fef9 	bl	8003160 <HAL_TIM_PWM_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000374:	f000 f86a 	bl	800044c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800037c:	2208      	movs	r2, #8
 800037e:	4619      	mov	r1, r3
 8000380:	4819      	ldr	r0, [pc, #100]	; (80003e8 <MX_TIM1_Init+0x180>)
 8000382:	f002 feed 	bl	8003160 <HAL_TIM_PWM_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800038c:	f000 f85e 	bl	800044c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000394:	220c      	movs	r2, #12
 8000396:	4619      	mov	r1, r3
 8000398:	4813      	ldr	r0, [pc, #76]	; (80003e8 <MX_TIM1_Init+0x180>)
 800039a:	f002 fee1 	bl	8003160 <HAL_TIM_PWM_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80003a4:	f000 f852 	bl	800044c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4807      	ldr	r0, [pc, #28]	; (80003e8 <MX_TIM1_Init+0x180>)
 80003cc:	f003 fb4c 	bl	8003a68 <HAL_TIMEx_ConfigBreakDeadTime>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80003d6:	f000 f839 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <MX_TIM1_Init+0x180>)
 80003dc:	f000 f90e 	bl	80005fc <HAL_TIM_MspPostInit>

}
 80003e0:	bf00      	nop
 80003e2:	3758      	adds	r7, #88	; 0x58
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000050 	.word	0x20000050
 80003ec:	40012c00 	.word	0x40012c00

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a13      	ldr	r2, [pc, #76]	; (8000448 <MX_GPIO_Init+0x58>)
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0320 	and.w	r3, r3, #32
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_GPIO_Init+0x58>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <MX_GPIO_Init+0x58>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6193      	str	r3, [r2, #24]
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_GPIO_Init+0x58>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_GPIO_Init+0x58>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a07      	ldr	r2, [pc, #28]	; (8000448 <MX_GPIO_Init+0x58>)
 800042c:	f043 0308 	orr.w	r3, r3, #8
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <MX_GPIO_Init+0x58>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0308 	and.w	r3, r3, #8
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000452:	b672      	cpsid	i
}
 8000454:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  [[maybe_unused]] volatile int dummy = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  dummy = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	e7fc      	b.n	800045a <Error_Handler+0xe>

08000460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	; (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <HAL_CAN_MspInit+0xb0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d143      	bne.n	800056c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f8:	613b      	str	r3, [r7, #16]
 80004fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fc:	4b1e      	ldr	r3, [pc, #120]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <HAL_CAN_MspInit+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4814      	ldr	r0, [pc, #80]	; (800057c <HAL_CAN_MspInit+0xb8>)
 800052a:	f001 fe89 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800052e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000534:	2302      	movs	r3, #2
 8000536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000538:	2303      	movs	r3, #3
 800053a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4619      	mov	r1, r3
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <HAL_CAN_MspInit+0xb8>)
 8000544:	f001 fe7c 	bl	8002240 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <HAL_CAN_MspInit+0xbc>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
 800054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000550:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
 8000556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000558:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
 800055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
 8000566:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_CAN_MspInit+0xbc>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40006400 	.word	0x40006400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010c00 	.word	0x40010c00
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_CAN_MspDeInit+0x30>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d10a      	bne.n	80005ac <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <HAL_CAN_MspDeInit+0x34>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_CAN_MspDeInit+0x34>)
 800059c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80005a0:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80005a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <HAL_CAN_MspDeInit+0x38>)
 80005a8:	f001 ffce 	bl	8002548 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40006400 	.word	0x40006400
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <HAL_TIM_Base_MspInit+0x34>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10b      	bne.n	80005ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40012c00 	.word	0x40012c00
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <HAL_TIM_MspPostInit+0x5c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d118      	bne.n	800064e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_TIM_MspPostInit+0x60>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_TIM_MspPostInit+0x60>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_TIM_MspPostInit+0x60>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000634:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_TIM_MspPostInit+0x64>)
 800064a:	f001 fdf9 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40012c00 	.word	0x40012c00
 800065c:	40021000 	.word	0x40021000
 8000660:	40010800 	.word	0x40010800

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f001 f9c1 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80006be:	4613      	mov	r3, r2
	  if (_Num)
 80006c0:	1a0a      	subs	r2, r1, r0
 80006c2:	d003      	beq.n	80006cc <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80006c4:	4601      	mov	r1, r0
 80006c6:	1a98      	subs	r0, r3, r2
 80006c8:	f003 ba44 	b.w	8003b54 <memmove>
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
    }
 80006cc:	4770      	bx	lr

080006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>:
	{
		// priority: {filter_match_index[7:6] | is_can2[:5] | is_fifo1[:4] | is_bit16[:3] | is_mask[:2] : index[1:0]}
		template<FilterWidth filter_width, FilterMode filter_mode>
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
		{
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80006ce:	4281      	cmp	r1, r0
 80006d0:	bf94      	ite	ls
 80006d2:	2120      	movls	r1, #32
 80006d4:	2100      	movhi	r1, #0
 80006d6:	2a01      	cmp	r2, #1
 80006d8:	bf0c      	ite	eq
 80006da:	2310      	moveq	r3, #16
 80006dc:	2300      	movne	r3, #0
 80006de:	4308      	orrs	r0, r1
		}
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4770      	bx	lr

080006e4 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>:
		Letterbox(CAN_HandleTypeDef *const hcan, const FifoIndex fifo_index) noexcept:
			hcan{hcan},
			fifo_index{fifo_index}
		{}

		void receive(RxFrame& frame) noexcept
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	460c      	mov	r4, r1
 80006e8:	4605      	mov	r5, r0
 80006ea:	b089      	sub	sp, #36	; 0x24
		{
			CAN_RxHeaderTypeDef rx_header{};
 80006ec:	221c      	movs	r2, #28
 80006ee:	2100      	movs	r1, #0
 80006f0:	a801      	add	r0, sp, #4
 80006f2:	f003 fa49 	bl	8003b88 <memset>

			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 80006f6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80006fa:	f104 0310 	add.w	r3, r4, #16
 80006fe:	aa01      	add	r2, sp, #4
 8000700:	f001 fb81 	bl	8001e06 <HAL_CAN_GetRxMessage>
			{
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
				.time_stamp = rx_header.Timestamp,
				.filter_match_index = rx_header.FilterMatchIndex,
				.dlc = static_cast<u8>(rx_header.DLC),
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8000704:	9b04      	ldr	r3, [sp, #16]
			frame.header =
 8000706:	f89d 1014 	ldrb.w	r1, [sp, #20]
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 800070a:	1e9a      	subs	r2, r3, #2
 800070c:	4253      	negs	r3, r2
 800070e:	4153      	adcs	r3, r2
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 8000710:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8000714:	ea42 22c0 	orr.w	r2, r2, r0, lsl #11
			frame.header =
 8000718:	6022      	str	r2, [r4, #0]
 800071a:	9a06      	ldr	r2, [sp, #24]
 800071c:	7321      	strb	r1, [r4, #12]
 800071e:	6062      	str	r2, [r4, #4]
 8000720:	9a07      	ldr	r2, [sp, #28]
 8000722:	7363      	strb	r3, [r4, #13]
 8000724:	60a2      	str	r2, [r4, #8]
			};
		}
 8000726:	b009      	add	sp, #36	; 0x24
 8000728:	bd30      	pop	{r4, r5, pc}

0800072a <_ZN6CRSLib3Can6RM00089Implement19crslib_default_hcanEP11CAN_TypeDefNS1_7BitrateE>:
#include "utility.hpp"

namespace CRSLib::Can::RM0008::Implement
{
	CAN_HandleTypeDef crslib_default_hcan(CAN_TypeDef * instance, Bitrate bitrate = Bitrate::rate1M) noexcept
	{
 800072a:	b538      	push	{r3, r4, r5, lr}
 800072c:	4604      	mov	r4, r0
 800072e:	4615      	mov	r5, r2
			
			// HALライブラリの捉え方によるbxCANの状態. 微妙にRM0008系のリファレンスとは状態の捉え方が違う.
			.State = HAL_CAN_STATE_READY,
			// エラーコード.
			.ErrorCode = HAL_CAN_ERROR_NONE
		};
 8000730:	6001      	str	r1, [r0, #0]
				.Prescaler = HAL_RCC_GetPCLK1Freq() / 18 / to_underlying(bitrate),
 8000732:	f002 fb99 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8000736:	2212      	movs	r2, #18
		};
 8000738:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
				.Prescaler = HAL_RCC_GetPCLK1Freq() / 18 / to_underlying(bitrate),
 800073c:	fbb0 f0f2 	udiv	r0, r0, r2
		};
 8000740:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000744:	e9c4 1204 	strd	r1, r2, [r4, #16]
 8000748:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 800074c:	2300      	movs	r3, #0
				.Prescaler = HAL_RCC_GetPCLK1Freq() / 18 / to_underlying(bitrate),
 800074e:	fbb0 f0f5 	udiv	r0, r0, r5
		};
 8000752:	61a2      	str	r2, [r4, #24]
 8000754:	2201      	movs	r2, #1
 8000756:	6060      	str	r0, [r4, #4]
 8000758:	f884 2020 	strb.w	r2, [r4, #32]
	}
 800075c:	4620      	mov	r0, r4
		};
 800075e:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8000762:	83a3      	strh	r3, [r4, #28]
 8000764:	6263      	str	r3, [r4, #36]	; 0x24
	}
 8000766:	bd38      	pop	{r3, r4, r5, pc}

08000768 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 8000768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800076a:	460e      	mov	r6, r1
 800076c:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 800076e:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8000770:	4604      	mov	r4, r0
 8000772:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8000776:	d018      	beq.n	80007aa <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8000778:	1c41      	adds	r1, r0, #1
 800077a:	42b1      	cmp	r1, r6
 800077c:	d015      	beq.n	80007aa <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 800077e:	460d      	mov	r5, r1
	{
	  if (__comp(__i, __first))
 8000780:	7823      	ldrb	r3, [r4, #0]
 8000782:	f815 7b01 	ldrb.w	r7, [r5], #1
 8000786:	42bb      	cmp	r3, r7
 8000788:	d906      	bls.n	8000798 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800078a:	462a      	mov	r2, r5
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff ff96 	bl	80006be <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8000792:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8000794:	4629      	mov	r1, r5
 8000796:	e7f0      	b.n	800077a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x12>
 8000798:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 800079c:	429f      	cmp	r7, r3
 800079e:	d202      	bcs.n	80007a6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3e>
	  *__last = _GLIBCXX_MOVE(*__next);
 80007a0:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 80007a4:	e7f8      	b.n	8000798 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 80007a6:	700f      	strb	r7, [r1, #0]
    }
 80007a8:	e7f4      	b.n	8000794 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x2c>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 80007aa:	b003      	add	sp, #12
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 80007ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80007b0:	460e      	mov	r6, r1
 80007b2:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 80007b4:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80007b6:	4604      	mov	r4, r0
 80007b8:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80007bc:	d01e      	beq.n	80007fc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80007be:	1c41      	adds	r1, r0, #1
 80007c0:	42b1      	cmp	r1, r6
 80007c2:	d01b      	beq.n	80007fc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80007c4:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 80007c6:	7823      	ldrb	r3, [r4, #0]
 80007c8:	f815 7b01 	ldrb.w	r7, [r5], #1
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	f007 0203 	and.w	r2, r7, #3
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d206      	bcs.n	80007e6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 80007d8:	462a      	mov	r2, r5
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff ff6f 	bl	80006be <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 80007e0:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80007e2:	4629      	mov	r1, r5
 80007e4:	e7ec      	b.n	80007c0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 80007e6:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 80007ea:	f003 0003 	and.w	r0, r3, #3
 80007ee:	4282      	cmp	r2, r0
 80007f0:	d202      	bcs.n	80007f8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 80007f2:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 80007f6:	e7f6      	b.n	80007e6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 80007f8:	700f      	strb	r7, [r1, #0]
    }
 80007fa:	e7f2      	b.n	80007e2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 80007fc:	b003      	add	sp, #12
 80007fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000800 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8000800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000802:	460e      	mov	r6, r1
 8000804:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8000806:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8000808:	4604      	mov	r4, r0
 800080a:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 800080e:	d01e      	beq.n	800084e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8000810:	1c41      	adds	r1, r0, #1
 8000812:	42b1      	cmp	r1, r6
 8000814:	d01b      	beq.n	800084e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
 8000816:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8000818:	7823      	ldrb	r3, [r4, #0]
 800081a:	f815 7b01 	ldrb.w	r7, [r5], #1
 800081e:	f003 0303 	and.w	r3, r3, #3
 8000822:	f007 0203 	and.w	r2, r7, #3
 8000826:	429a      	cmp	r2, r3
 8000828:	d206      	bcs.n	8000838 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800082a:	462a      	mov	r2, r5
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ff46 	bl	80006be <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8000832:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8000834:	4629      	mov	r1, r5
 8000836:	e7ec      	b.n	8000812 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8000838:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 800083c:	f003 0003 	and.w	r0, r3, #3
 8000840:	4282      	cmp	r2, r0
 8000842:	d202      	bcs.n	800084a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8000844:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8000848:	e7f6      	b.n	8000838 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800084a:	700f      	strb	r7, [r1, #0]
    }
 800084c:	e7f2      	b.n	8000834 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 800084e:	b003      	add	sp, #12
 8000850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000852 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8000852:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 8000854:	1e54      	subs	r4, r2, #1
 8000856:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800085a:	1065      	asrs	r5, r4, #1
 800085c:	460c      	mov	r4, r1
 800085e:	42a5      	cmp	r5, r4
 8000860:	dd0f      	ble.n	8000882 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x30>
	{
	  __secondChild = 2 * (__secondChild + 1);
 8000862:	1c67      	adds	r7, r4, #1
 8000864:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8000868:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 800086a:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 800086e:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8000872:	45bc      	cmp	ip, r7
		     __first + (__secondChild - 1)))
	    __secondChild--;
 8000874:	bf88      	it	hi
 8000876:	f106 36ff 	addhi.w	r6, r6, #4294967295	; 0xffffffff
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800087a:	5d87      	ldrb	r7, [r0, r6]
 800087c:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 800087e:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8000880:	e7ed      	b.n	800085e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xc>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8000882:	07d5      	lsls	r5, r2, #31
 8000884:	d40d      	bmi.n	80008a2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
 8000886:	3a02      	subs	r2, #2
 8000888:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800088c:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8000890:	d107      	bne.n	80008a2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
 8000892:	1c62      	adds	r2, r4, #1
 8000894:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8000896:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800089a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800089e:	5502      	strb	r2, [r0, r4]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 80008a0:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 80008a2:	1e62      	subs	r2, r4, #1
 80008a4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80008a8:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80008aa:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80008ac:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80008b0:	da09      	bge.n	80008c6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
 80008b2:	5c84      	ldrb	r4, [r0, r2]
 80008b4:	42a3      	cmp	r3, r4
 80008b6:	d906      	bls.n	80008c6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80008b8:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80008ba:	1e54      	subs	r4, r2, #1
 80008bc:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80008c0:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80008c2:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80008c4:	e7f1      	b.n	80008aa <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x58>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80008c6:	702b      	strb	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ca <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 80008ca:	b082      	sub	sp, #8
 80008cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4604      	mov	r4, r0
 80008d2:	460d      	mov	r5, r1
 80008d4:	4617      	mov	r7, r2
 80008d6:	b087      	sub	sp, #28
 80008d8:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80008da:	f100 0801 	add.w	r8, r0, #1
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 80008de:	1b2e      	subs	r6, r5, r4
 80008e0:	2e10      	cmp	r6, #16
 80008e2:	dd29      	ble.n	8000938 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x6e>
	{
	  if (__depth_limit == 0)
 80008e4:	bb6f      	cbnz	r7, 8000942 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x78>
 80008e6:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80008ea:	f10d 0808 	add.w	r8, sp, #8
 80008ee:	f10d 0910 	add.w	r9, sp, #16
 80008f2:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 80008f6:	e889 0003 	stmia.w	r9, {r0, r1}

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
 80008fa:	1eb7      	subs	r7, r6, #2
 80008fc:	107f      	asrs	r7, r7, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80008fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8000902:	4632      	mov	r2, r6
 8000904:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000908:	5de3      	ldrb	r3, [r4, r7]
 800090a:	4639      	mov	r1, r7
 800090c:	4620      	mov	r0, r4
 800090e:	f7ff ffa0 	bl	8000852 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
			     __comp);
	  if (__parent == 0)
 8000912:	b10f      	cbz	r7, 8000918 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	    return;
	  __parent--;
 8000914:	3f01      	subs	r7, #1
      while (true)
 8000916:	e7f2      	b.n	80008fe <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8000918:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 800091c:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800091e:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8000920:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8000924:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8000926:	e88d 0003 	stmia.w	sp, {r0, r1}
 800092a:	4632      	mov	r2, r6
 800092c:	2100      	movs	r1, #0
 800092e:	4620      	mov	r0, r4
 8000930:	f7ff ff8f 	bl	8000852 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8000934:	2e01      	cmp	r6, #1
 8000936:	dcef      	bgt.n	8000918 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 8000938:	b007      	add	sp, #28
 800093a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800093e:	b002      	add	sp, #8
 8000940:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8000942:	1076      	asrs	r6, r6, #1
 8000944:	7860      	ldrb	r0, [r4, #1]
 8000946:	5da1      	ldrb	r1, [r4, r6]
 8000948:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      if (__comp(__a, __b))
 800094c:	4288      	cmp	r0, r1
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800094e:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8000950:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
 8000954:	d224      	bcs.n	80009a0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xd6>
	  if (__comp(__b, __c))
 8000956:	428a      	cmp	r2, r1
 8000958:	d91c      	bls.n	8000994 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xca>
      __a = _GLIBCXX_MOVE(__b);
 800095a:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800095c:	55a3      	strb	r3, [r4, r6]
 800095e:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8000960:	462b      	mov	r3, r5
 8000962:	4616      	mov	r6, r2
 8000964:	f894 e000 	ldrb.w	lr, [r4]
 8000968:	f812 0b01 	ldrb.w	r0, [r2], #1
	  while (__comp(__first, __pivot))
 800096c:	4570      	cmp	r0, lr
 800096e:	d3f8      	bcc.n	8000962 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>
	  --__last;
 8000970:	1e59      	subs	r1, r3, #1
 8000972:	460b      	mov	r3, r1
 8000974:	f811 c901 	ldrb.w	ip, [r1], #-1
	  while (__comp(__pivot, __last))
 8000978:	45e6      	cmp	lr, ip
 800097a:	d3fa      	bcc.n	8000972 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xa8>
	  if (!(__first < __last))
 800097c:	429e      	cmp	r6, r3
 800097e:	d317      	bcc.n	80009b0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8000980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000982:	4629      	mov	r1, r5
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	463a      	mov	r2, r7
 8000988:	4630      	mov	r0, r6
 800098a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800098c:	f7ff ff9d 	bl	80008ca <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
      while (__last - __first > int(_S_threshold))
 8000990:	4635      	mov	r5, r6
 8000992:	e7a4      	b.n	80008de <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x14>
	  else if (__comp(__a, __c))
 8000994:	4282      	cmp	r2, r0
 8000996:	d905      	bls.n	80009a4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xda>
      __a = _GLIBCXX_MOVE(__b);
 8000998:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800099a:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 800099e:	e7de      	b.n	800095e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__a, __c))
 80009a0:	4282      	cmp	r2, r0
 80009a2:	d902      	bls.n	80009aa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe0>
      __a = _GLIBCXX_MOVE(__b);
 80009a4:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80009a6:	7063      	strb	r3, [r4, #1]
 80009a8:	e7d9      	b.n	800095e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__b, __c))
 80009aa:	428a      	cmp	r2, r1
 80009ac:	d9d5      	bls.n	800095a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x90>
 80009ae:	e7f3      	b.n	8000998 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xce>
      __a = _GLIBCXX_MOVE(__b);
 80009b0:	f802 cc01 	strb.w	ip, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 80009b4:	7018      	strb	r0, [r3, #0]
	  while (__comp(__first, __pivot))
 80009b6:	e7d4      	b.n	8000962 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>

080009b8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
  // sort

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	b087      	sub	sp, #28
 80009bc:	ae02      	add	r6, sp, #8
	   _Compare __comp)
    {
      if (__first != __last)
 80009be:	4288      	cmp	r0, r1
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80009c0:	4604      	mov	r4, r0
 80009c2:	460d      	mov	r5, r1
 80009c4:	e886 000c 	stmia.w	r6, {r2, r3}
      if (__first != __last)
 80009c8:	d02a      	beq.n	8000a20 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80009ca:	1a0f      	subs	r7, r1, r0

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80009cc:	fab7 f287 	clz	r2, r7
 80009d0:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	0052      	lsls	r2, r2, #1
 80009d8:	9b02      	ldr	r3, [sp, #8]
 80009da:	f7ff ff76 	bl	80008ca <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
 80009de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80009e2:	ab04      	add	r3, sp, #16
      if (__last - __first > int(_S_threshold))
 80009e4:	2f10      	cmp	r7, #16
 80009e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80009ea:	dd14      	ble.n	8000a16 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80009ec:	cb0c      	ldmia	r3, {r2, r3}
 80009ee:	f104 0610 	add.w	r6, r4, #16
 80009f2:	4631      	mov	r1, r6
 80009f4:	4620      	mov	r0, r4
 80009f6:	f7ff feb7 	bl	8000768 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80009fa:	42b5      	cmp	r5, r6
 80009fc:	d010      	beq.n	8000a20 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 80009fe:	4633      	mov	r3, r6
	__val = _GLIBCXX_MOVE(*__last);
 8000a00:	7832      	ldrb	r2, [r6, #0]
 8000a02:	f813 1c01 	ldrb.w	r1, [r3, #-1]
      while (__comp(__val, __next))
 8000a06:	428a      	cmp	r2, r1
 8000a08:	d202      	bcs.n	8000a10 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x58>
	  *__last = _GLIBCXX_MOVE(*__next);
 8000a0a:	f803 1901 	strb.w	r1, [r3], #-1
      while (__comp(__val, __next))
 8000a0e:	e7f8      	b.n	8000a02 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x4a>
      *__last = _GLIBCXX_MOVE(__val);
 8000a10:	701a      	strb	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8000a12:	3601      	adds	r6, #1
 8000a14:	e7f1      	b.n	80009fa <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	std::__insertion_sort(__first, __last, __comp);
 8000a16:	4629      	mov	r1, r5
 8000a18:	cb0c      	ldmia	r3, {r2, r3}
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f7ff fea4 	bl	8000768 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
				__comp);
	  std::__final_insertion_sort(__first, __last, __comp);
	}
    }
 8000a20:	b007      	add	sp, #28
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8000a26:	1e54      	subs	r4, r2, #1
 8000a28:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000a2c:	1065      	asrs	r5, r4, #1
 8000a2e:	460c      	mov	r4, r1
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	dd13      	ble.n	8000a5c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8000a34:	1c67      	adds	r7, r4, #1
 8000a36:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8000a3a:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8000a3c:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8000a40:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8000a44:	f00c 0c03 	and.w	ip, ip, #3
 8000a48:	f007 0703 	and.w	r7, r7, #3
 8000a4c:	45bc      	cmp	ip, r7
	    __secondChild--;
 8000a4e:	bf88      	it	hi
 8000a50:	f106 36ff 	addhi.w	r6, r6, #4294967295	; 0xffffffff
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8000a54:	5d87      	ldrb	r7, [r0, r6]
 8000a56:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8000a58:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8000a5a:	e7e9      	b.n	8000a30 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8000a5c:	07d5      	lsls	r5, r2, #31
 8000a5e:	d40d      	bmi.n	8000a7c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 8000a60:	3a02      	subs	r2, #2
 8000a62:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000a66:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8000a6a:	d107      	bne.n	8000a7c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 8000a6c:	1c62      	adds	r2, r4, #1
 8000a6e:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8000a70:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8000a74:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8000a78:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 8000a7a:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8000a7c:	1e62      	subs	r2, r4, #1
 8000a7e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000a82:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8000a84:	f003 0603 	and.w	r6, r3, #3
 8000a88:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8000a8a:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8000a8e:	da0b      	bge.n	8000aa8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 8000a90:	5c84      	ldrb	r4, [r0, r2]
 8000a92:	f004 0703 	and.w	r7, r4, #3
 8000a96:	42b7      	cmp	r7, r6
 8000a98:	d206      	bcs.n	8000aa8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8000a9a:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 8000a9c:	1e54      	subs	r4, r2, #1
 8000a9e:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8000aa2:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8000aa4:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8000aa6:	e7ef      	b.n	8000a88 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8000aa8:	702b      	strb	r3, [r5, #0]
    }
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000aac <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8000aac:	b082      	sub	sp, #8
 8000aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	460d      	mov	r5, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	b087      	sub	sp, #28
 8000aba:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8000abc:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 8000ac0:	1b2e      	subs	r6, r5, r4
 8000ac2:	2e10      	cmp	r6, #16
 8000ac4:	dd29      	ble.n	8000b1a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 8000ac6:	bb6f      	cbnz	r7, 8000b24 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 8000ac8:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8000acc:	f10d 0808 	add.w	r8, sp, #8
 8000ad0:	f10d 0910 	add.w	r9, sp, #16
 8000ad4:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8000ad8:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8000adc:	1eb7      	subs	r7, r6, #2
 8000ade:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8000ae0:	e899 0003 	ldmia.w	r9, {r0, r1}
 8000ae4:	4632      	mov	r2, r6
 8000ae6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000aea:	5de3      	ldrb	r3, [r4, r7]
 8000aec:	4639      	mov	r1, r7
 8000aee:	4620      	mov	r0, r4
 8000af0:	f7ff ff98 	bl	8000a24 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8000af4:	b10f      	cbz	r7, 8000afa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8000af6:	3f01      	subs	r7, #1
      while (true)
 8000af8:	e7f2      	b.n	8000ae0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8000afa:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8000afe:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8000b00:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8000b02:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8000b06:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8000b08:	e88d 0003 	stmia.w	sp, {r0, r1}
 8000b0c:	4632      	mov	r2, r6
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff ff87 	bl	8000a24 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8000b16:	2e01      	cmp	r6, #1
 8000b18:	dcef      	bgt.n	8000afa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 8000b1a:	b007      	add	sp, #28
 8000b1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b20:	b002      	add	sp, #8
 8000b22:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8000b24:	1076      	asrs	r6, r6, #1
 8000b26:	f894 e001 	ldrb.w	lr, [r4, #1]
 8000b2a:	5da1      	ldrb	r1, [r4, r6]
 8000b2c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8000b30:	f00e 0903 	and.w	r9, lr, #3
 8000b34:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8000b38:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8000b3a:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8000b3c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8000b40:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8000b44:	d229      	bcs.n	8000b9a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8000b46:	4594      	cmp	ip, r2
 8000b48:	d221      	bcs.n	8000b8e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 8000b4a:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000b4c:	55a3      	strb	r3, [r4, r6]
 8000b4e:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8000b50:	462b      	mov	r3, r5
 8000b52:	4616      	mov	r6, r2
 8000b54:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8000b56:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8000b5a:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8000b5e:	f00c 0003 	and.w	r0, ip, #3
 8000b62:	4288      	cmp	r0, r1
 8000b64:	d3f5      	bcc.n	8000b52 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8000b66:	1e58      	subs	r0, r3, #1
 8000b68:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8000b6a:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8000b6e:	f00e 0903 	and.w	r9, lr, #3
 8000b72:	4549      	cmp	r1, r9
 8000b74:	d3f8      	bcc.n	8000b68 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d318      	bcc.n	8000bac <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8000b7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000b7c:	4629      	mov	r1, r5
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	463a      	mov	r2, r7
 8000b82:	4630      	mov	r0, r6
 8000b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000b86:	f7ff ff91 	bl	8000aac <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 8000b8a:	4635      	mov	r5, r6
 8000b8c:	e798      	b.n	8000ac0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8000b8e:	4591      	cmp	r9, r2
 8000b90:	d205      	bcs.n	8000b9e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8000b92:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000b94:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 8000b98:	e7d9      	b.n	8000b4e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 8000b9a:	4591      	cmp	r9, r2
 8000b9c:	d203      	bcs.n	8000ba6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8000b9e:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8000ba2:	7063      	strb	r3, [r4, #1]
 8000ba4:	e7d3      	b.n	8000b4e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8000ba6:	4594      	cmp	ip, r2
 8000ba8:	d2cf      	bcs.n	8000b4a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 8000baa:	e7f2      	b.n	8000b92 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8000bac:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8000bb0:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8000bb4:	e7cd      	b.n	8000b52 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08000bb6 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:

		template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8000bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bba:	4604      	mov	r4, r0
 8000bbc:	b099      	sub	sp, #100	; 0x64
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	4688      	mov	r8, r1
		{
			std::array<u8, sizeof...(filter_widthes)> priorities;

			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000bc2:	688a      	ldr	r2, [r1, #8]
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	2000      	movs	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8000bc8:	461e      	mov	r6, r3
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8000bca:	f7ff fd80 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	9003      	str	r0, [sp, #12]
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff fd7a 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000bda:	68b2      	ldr	r2, [r6, #8]
 8000bdc:	4621      	mov	r1, r4
 8000bde:	9004      	str	r0, [sp, #16]
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff fd74 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000be6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000be8:	4621      	mov	r1, r4
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	9005      	str	r0, [sp, #20]
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f7ff fd6d 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000bf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	9006      	str	r0, [sp, #24]
 8000bfc:	2004      	movs	r0, #4
 8000bfe:	f7ff fd66 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000c04:	4621      	mov	r1, r4
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	9007      	str	r0, [sp, #28]
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f7ff fd5f 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c10:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8000c12:	4621      	mov	r1, r4
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	900b      	str	r0, [sp, #44]	; 0x2c
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f7ff fd58 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000c20:	4683      	mov	fp, r0
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	4621      	mov	r1, r4
 8000c26:	2007      	movs	r0, #7
 8000c28:	f7ff fd51 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8000c2e:	4682      	mov	sl, r0
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	4621      	mov	r1, r4
 8000c34:	2008      	movs	r0, #8
 8000c36:	f7ff fd4a 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8000c3c:	4681      	mov	r9, r0
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	4621      	mov	r1, r4
 8000c42:	2009      	movs	r0, #9
 8000c44:	f7ff fd43 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	9008      	str	r0, [sp, #32]
 8000c50:	200a      	movs	r0, #10
 8000c52:	f7ff fd3c 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8000c58:	4621      	mov	r1, r4
 8000c5a:	9009      	str	r0, [sp, #36]	; 0x24
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	200b      	movs	r0, #11
 8000c60:	f7ff fd35 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c64:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8000c66:	4621      	mov	r1, r4
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	900a      	str	r0, [sp, #40]	; 0x28
 8000c6c:	200c      	movs	r0, #12
 8000c6e:	f7ff fd2e 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8000c74:	4605      	mov	r5, r0
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	4621      	mov	r1, r4
 8000c7a:	200d      	movs	r0, #13
 8000c7c:	f7ff fd27 	bl	80006ce <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8000c80:	9b03      	ldr	r3, [sp, #12]
 8000c82:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
 8000c86:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8000c8a:	9b04      	ldr	r3, [sp, #16]
 8000c8c:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
 8000c90:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 8000c94:	9b05      	ldr	r3, [sp, #20]
 8000c96:	f88d a057 	strb.w	sl, [sp, #87]	; 0x57
 8000c9a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8000c9e:	9b06      	ldr	r3, [sp, #24]
 8000ca0:	f88d 9058 	strb.w	r9, [sp, #88]	; 0x58
 8000ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ca8:	9b07      	ldr	r3, [sp, #28]
 8000caa:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
 8000cae:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8000cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8000cb4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8000cb8:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 8000cbc:	9b08      	ldr	r3, [sp, #32]
 8000cbe:	a814      	add	r0, sp, #80	; 0x50
 8000cc0:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 8000cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cc6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8000cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ccc:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8000cd8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8000cdc:	ab12      	add	r3, sp, #72	; 0x48
 8000cde:	930e      	str	r3, [sp, #56]	; 0x38
 8000ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000ce2:	ab10      	add	r3, sp, #64	; 0x40
 8000ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ce6:	f7ff fe67 	bl	80009b8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8000cea:	2200      	movs	r2, #0
			
			std::ranges::sort(priorities);

			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
			{
				for(u32 i = 0; auto& priority : priorities)
 8000cec:	2100      	movs	r1, #0
 8000cee:	a814      	add	r0, sp, #80	; 0x50
				{
					priority |= (i << 6);
 8000cf0:	7803      	ldrb	r3, [r0, #0]
 8000cf2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f800 3b01 	strb.w	r3, [r0], #1
					++i;

					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8000cfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000d00:	4293      	cmp	r3, r2
					++i;
 8000d02:	f101 0101 	add.w	r1, r1, #1
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8000d06:	d001      	beq.n	8000d0c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x156>
				for(u32 i = 0; auto& priority : priorities)
 8000d08:	290e      	cmp	r1, #14
 8000d0a:	d1f1      	bne.n	8000cf0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x13a>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8000d0c:	3210      	adds	r2, #16
 8000d0e:	2a40      	cmp	r2, #64	; 0x40
 8000d10:	d1ec      	bne.n	8000cec <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x136>
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8000d12:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8000d16:	ad0d      	add	r5, sp, #52	; 0x34
 8000d18:	ac0c      	add	r4, sp, #48	; 0x30
 8000d1a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8000d1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8000d22:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8000d26:	462b      	mov	r3, r5
 8000d28:	a814      	add	r0, sp, #80	; 0x50
 8000d2a:	2206      	movs	r2, #6
 8000d2c:	9400      	str	r4, [sp, #0]
 8000d2e:	9510      	str	r5, [sp, #64]	; 0x40
 8000d30:	9411      	str	r4, [sp, #68]	; 0x44
 8000d32:	f7ff febb 	bl	8000aac <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	std::__insertion_sort(__first, __last, __comp);
 8000d36:	4623      	mov	r3, r4
 8000d38:	462a      	mov	r2, r5
 8000d3a:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8000d3e:	a814      	add	r0, sp, #80	; 0x50
 8000d40:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
 8000d44:	f7ff fd33 	bl	80007ae <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>

			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});

			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8000d48:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8000d4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000d4e:	099b      	lsrs	r3, r3, #6
 8000d50:	f8c8 300c 	str.w	r3, [r8, #12]
 8000d54:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8000d60:	099b      	lsrs	r3, r3, #6
 8000d62:	60f3      	str	r3, [r6, #12]
 8000d64:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	60d3      	str	r3, [r2, #12]
 8000d6c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8000d70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000d72:	099b      	lsrs	r3, r3, #6
 8000d74:	60d3      	str	r3, [r2, #12]
 8000d76:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 8000d7a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8000d7c:	099b      	lsrs	r3, r3, #6
 8000d7e:	60d3      	str	r3, [r2, #12]
 8000d80:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8000d84:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8000d86:	099b      	lsrs	r3, r3, #6
 8000d88:	60d3      	str	r3, [r2, #12]
 8000d8a:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8000d8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8000d90:	099b      	lsrs	r3, r3, #6
 8000d92:	60d3      	str	r3, [r2, #12]
 8000d94:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8000d98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8000d9a:	099b      	lsrs	r3, r3, #6
 8000d9c:	60d3      	str	r3, [r2, #12]
 8000d9e:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8000da2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8000da4:	099b      	lsrs	r3, r3, #6
 8000da6:	60d3      	str	r3, [r2, #12]
 8000da8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8000dac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8000dae:	099b      	lsrs	r3, r3, #6
 8000db0:	60d3      	str	r3, [r2, #12]
 8000db2:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8000db6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8000db8:	099b      	lsrs	r3, r3, #6
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8000dc0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8000dc2:	099b      	lsrs	r3, r3, #6
 8000dc4:	60d3      	str	r3, [r2, #12]
 8000dc6:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 8000dca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8000dcc:	099b      	lsrs	r3, r3, #6
 8000dce:	60d3      	str	r3, [r2, #12]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
		}
 8000dd0:	b019      	add	sp, #100	; 0x64
 8000dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000dd8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			clear_bit(bxcan->FA1R, bit_position);
		}
	}

	template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ddc:	460e      	mov	r6, r1
 8000dde:	b091      	sub	sp, #68	; 0x44
	requires (sizeof...(filter_args) <= Config::filter_bank_total_size)
	{
		// assign FMI.
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000de0:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000de4:	9f24      	ldr	r7, [sp, #144]	; 0x90
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000de6:	f8cd c014 	str.w	ip, [sp, #20]
 8000dea:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000dee:	e9dd ba20 	ldrd	fp, sl, [sp, #128]	; 0x80
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000df2:	f8cd c010 	str.w	ip, [sp, #16]
 8000df6:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000dfa:	e9dd 9822 	ldrd	r9, r8, [sp, #136]	; 0x88
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000dfe:	f8cd c00c 	str.w	ip, [sp, #12]
 8000e02:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8000e06:	e9cd a907 	strd	sl, r9, [sp, #28]
 8000e0a:	f8cd c008 	str.w	ip, [sp, #8]
 8000e0e:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8000e12:	f8cd b018 	str.w	fp, [sp, #24]
 8000e16:	f8cd c004 	str.w	ip, [sp, #4]
 8000e1a:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000e1e:	4615      	mov	r5, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000e20:	f8cd c000 	str.w	ip, [sp]
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8000e24:	461c      	mov	r4, r3
 8000e26:	900d      	str	r0, [sp, #52]	; 0x34
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8000e28:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
 8000e2c:	f7ff fec3 	bl	8000bb6 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
	{
		bit = bit | reg;
 8000e30:	4bd1      	ldr	r3, [pc, #836]	; (8001178 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a0>)
 8000e32:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 8000e3e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8000e42:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000e46:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 8000e4a:	f8d3 0600 	ldr.w	r0, [r3, #1536]	; 0x600
 8000e4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000e50:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8000e54:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8000e58:	6871      	ldr	r1, [r6, #4]
 8000e5a:	6830      	ldr	r0, [r6, #0]
 8000e5c:	aa0e      	add	r2, sp, #56	; 0x38
 8000e5e:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8000e60:	4ac6      	ldr	r2, [pc, #792]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8000e62:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8000e66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8000e68:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 8000e6c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8000e70:	f042 0201 	orr.w	r2, r2, #1
 8000e74:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8000e78:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8000e84:	68b2      	ldr	r2, [r6, #8]
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	f040 827d 	bne.w	8001386 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ae>
		bit = bit & ~reg;
 8000e8c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8000e90:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 8000e94:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8000e98:	7c32      	ldrb	r2, [r6, #16]
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	f000 8278 	beq.w	8001390 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5b8>
 8000ea0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8000ea4:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 8000ea8:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8000eac:	6828      	ldr	r0, [r5, #0]
 8000eae:	6869      	ldr	r1, [r5, #4]
 8000eb0:	ab0e      	add	r3, sp, #56	; 0x38
 8000eb2:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8000eb4:	4bb1      	ldr	r3, [pc, #708]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8000eb6:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8000eba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8000ebc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000ec0:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 8000ec4:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8000ec8:	f042 0202 	orr.w	r2, r2, #2
 8000ecc:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8000ed0:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8000ed4:	f042 0202 	orr.w	r2, r2, #2
 8000ed8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8000edc:	68aa      	ldr	r2, [r5, #8]
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	f040 825b 	bne.w	800139a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5c2>
		bit = bit & ~reg;
 8000ee4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8000ee8:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 8000eec:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8000ef0:	7c2a      	ldrb	r2, [r5, #16]
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	f000 8256 	beq.w	80013a4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5cc>
 8000ef8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8000efc:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8000f00:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8000f04:	6820      	ldr	r0, [r4, #0]
 8000f06:	6861      	ldr	r1, [r4, #4]
 8000f08:	ab0e      	add	r3, sp, #56	; 0x38
 8000f0a:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8000f0c:	4b9b      	ldr	r3, [pc, #620]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8000f0e:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8000f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8000f14:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f18:	f8c3 2654 	str.w	r2, [r3, #1620]	; 0x654
 8000f1c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8000f20:	f042 0204 	orr.w	r2, r2, #4
 8000f24:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8000f28:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8000f2c:	f042 0204 	orr.w	r2, r2, #4
 8000f30:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8000f34:	68a2      	ldr	r2, [r4, #8]
 8000f36:	2a00      	cmp	r2, #0
 8000f38:	f040 8239 	bne.w	80013ae <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5d6>
		bit = bit & ~reg;
 8000f3c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8000f40:	f022 0204 	bic.w	r2, r2, #4
		bit = bit | reg;
 8000f44:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8000f48:	7c22      	ldrb	r2, [r4, #16]
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	f000 8234 	beq.w	80013b8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5e0>
 8000f50:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8000f54:	f042 0204 	orr.w	r2, r2, #4
		bit = bit & ~reg;
 8000f58:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8000f5c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000f5e:	ab0e      	add	r3, sp, #56	; 0x38
 8000f60:	6810      	ldr	r0, [r2, #0]
 8000f62:	6851      	ldr	r1, [r2, #4]
 8000f64:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8000f66:	4b85      	ldr	r3, [pc, #532]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8000f68:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8000f6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8000f6e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000f72:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
 8000f76:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8000f7a:	f042 0208 	orr.w	r2, r2, #8
 8000f7e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8000f82:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8000f86:	f042 0208 	orr.w	r2, r2, #8
 8000f8a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8000f8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000f90:	6892      	ldr	r2, [r2, #8]
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	f040 8215 	bne.w	80013c2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ea>
		bit = bit & ~reg;
 8000f98:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
		bit = bit | reg;
 8000fa0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8000fa4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000fa6:	7c12      	ldrb	r2, [r2, #16]
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	f000 820f 	beq.w	80013cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5f4>
 8000fae:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8000fb2:	f042 0208 	orr.w	r2, r2, #8
		bit = bit & ~reg;
 8000fb6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8000fba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000fbc:	ab0e      	add	r3, sp, #56	; 0x38
 8000fbe:	6810      	ldr	r0, [r2, #0]
 8000fc0:	6851      	ldr	r1, [r2, #4]
 8000fc2:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8000fc4:	4b6d      	ldr	r3, [pc, #436]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8000fc6:	f8c3 0260 	str.w	r0, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8000fca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8000fcc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000fd0:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
 8000fd4:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8000fd8:	f042 0210 	orr.w	r2, r2, #16
 8000fdc:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8000fe0:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8000fe4:	f042 0210 	orr.w	r2, r2, #16
 8000fe8:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8000fec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000fee:	6892      	ldr	r2, [r2, #8]
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	f040 81f0 	bne.w	80013d6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5fe>
		bit = bit & ~reg;
 8000ff6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8000ffa:	f022 0210 	bic.w	r2, r2, #16
		bit = bit | reg;
 8000ffe:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001002:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001004:	7c12      	ldrb	r2, [r2, #16]
 8001006:	2a00      	cmp	r2, #0
 8001008:	f000 81ea 	beq.w	80013e0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x608>
 800100c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001010:	f042 0210 	orr.w	r2, r2, #16
		bit = bit & ~reg;
 8001014:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001018:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800101a:	ab0e      	add	r3, sp, #56	; 0x38
 800101c:	6810      	ldr	r0, [r2, #0]
 800101e:	6851      	ldr	r1, [r2, #4]
 8001020:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001024:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800102a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800102e:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8001032:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001036:	f042 0220 	orr.w	r2, r2, #32
 800103a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800103e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001042:	f042 0220 	orr.w	r2, r2, #32
 8001046:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800104a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800104c:	6892      	ldr	r2, [r2, #8]
 800104e:	2a00      	cmp	r2, #0
 8001050:	f040 81cb 	bne.w	80013ea <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x612>
		bit = bit & ~reg;
 8001054:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001058:	f022 0220 	bic.w	r2, r2, #32
		bit = bit | reg;
 800105c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001060:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001062:	7c12      	ldrb	r2, [r2, #16]
 8001064:	2a00      	cmp	r2, #0
 8001066:	f000 81c5 	beq.w	80013f4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x61c>
 800106a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800106e:	f042 0220 	orr.w	r2, r2, #32
		bit = bit & ~reg;
 8001072:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001076:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001078:	ab0e      	add	r3, sp, #56	; 0x38
 800107a:	6810      	ldr	r0, [r2, #0]
 800107c:	6851      	ldr	r1, [r2, #4]
 800107e:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001082:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001088:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800108c:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 8001090:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001098:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800109c:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80010a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a4:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80010a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80010aa:	6892      	ldr	r2, [r2, #8]
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	f040 81a6 	bne.w	80013fe <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x626>
		bit = bit & ~reg;
 80010b2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80010b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		bit = bit | reg;
 80010ba:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80010be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80010c0:	7c12      	ldrb	r2, [r2, #16]
 80010c2:	2a00      	cmp	r2, #0
 80010c4:	f000 81a0 	beq.w	8001408 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x630>
 80010c8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80010cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		bit = bit & ~reg;
 80010d0:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80010d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80010d6:	ab0e      	add	r3, sp, #56	; 0x38
 80010d8:	6810      	ldr	r0, [r2, #0]
 80010da:	6851      	ldr	r1, [r2, #4]
 80010dc:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 80010e0:	f8c3 0278 	str.w	r0, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80010e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80010e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80010ea:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 80010ee:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80010f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80010fa:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80010fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001102:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001106:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001108:	6892      	ldr	r2, [r2, #8]
 800110a:	2a00      	cmp	r2, #0
 800110c:	f040 8181 	bne.w	8001412 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x63a>
		bit = bit & ~reg;
 8001110:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
		bit = bit | reg;
 8001118:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 800111c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800111e:	7c12      	ldrb	r2, [r2, #16]
 8001120:	2a00      	cmp	r2, #0
 8001122:	f000 817b 	beq.w	800141c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x644>
 8001126:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800112a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		bit = bit & ~reg;
 800112e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001132:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001134:	ab0e      	add	r3, sp, #56	; 0x38
 8001136:	6810      	ldr	r0, [r2, #0]
 8001138:	6851      	ldr	r1, [r2, #4]
 800113a:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800113e:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001144:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001148:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
 800114c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001154:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001158:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800115c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001160:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001164:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001166:	6892      	ldr	r2, [r2, #8]
 8001168:	2a00      	cmp	r2, #0
 800116a:	f040 815c 	bne.w	8001426 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x64e>
		bit = bit & ~reg;
 800116e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001172:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001176:	e003      	b.n	8001180 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
 8001178:	40006000 	.word	0x40006000
 800117c:	40006400 	.word	0x40006400
		bit = bit | reg;
 8001180:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001184:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001186:	7c12      	ldrb	r2, [r2, #16]
 8001188:	2a00      	cmp	r2, #0
 800118a:	f000 8151 	beq.w	8001430 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x658>
 800118e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		bit = bit & ~reg;
 8001196:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800119a:	f8db 0000 	ldr.w	r0, [fp]
 800119e:	f8db 1004 	ldr.w	r1, [fp, #4]
 80011a2:	ab0e      	add	r3, sp, #56	; 0x38
 80011a4:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80011a6:	4bbe      	ldr	r3, [pc, #760]	; (80014a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80011a8:	f8c3 0288 	str.w	r0, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80011ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80011ae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011b2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 80011b6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80011ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011be:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80011c2:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80011c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ca:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80011ce:	f8db 2008 	ldr.w	r2, [fp, #8]
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	f040 8131 	bne.w	800143a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x662>
		bit = bit & ~reg;
 80011d8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80011dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		bit = bit | reg;
 80011e0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80011e4:	f89b 2010 	ldrb.w	r2, [fp, #16]
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	f000 812b 	beq.w	8001444 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x66c>
 80011ee:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80011f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		bit = bit & ~reg;
 80011f6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80011fa:	f8da 0000 	ldr.w	r0, [sl]
 80011fe:	f8da 1004 	ldr.w	r1, [sl, #4]
 8001202:	ab0e      	add	r3, sp, #56	; 0x38
 8001204:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001206:	4ba6      	ldr	r3, [pc, #664]	; (80014a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8001208:	f8c3 0290 	str.w	r0, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800120c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800120e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001212:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
 8001216:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800121a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800121e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001222:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800122a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800122e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8001232:	2a00      	cmp	r2, #0
 8001234:	f040 810b 	bne.w	800144e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x676>
		bit = bit & ~reg;
 8001238:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800123c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
		bit = bit | reg;
 8001240:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001244:	f89a 2010 	ldrb.w	r2, [sl, #16]
 8001248:	2a00      	cmp	r2, #0
 800124a:	f000 8105 	beq.w	8001458 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x680>
 800124e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
		bit = bit & ~reg;
 8001256:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800125a:	f8d9 0000 	ldr.w	r0, [r9]
 800125e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001262:	ab0e      	add	r3, sp, #56	; 0x38
 8001264:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001266:	4b8e      	ldr	r3, [pc, #568]	; (80014a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8001268:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800126c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800126e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001272:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
 8001276:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800127a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800127e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001282:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800128a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800128e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001292:	2a00      	cmp	r2, #0
 8001294:	f040 80e5 	bne.w	8001462 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x68a>
		bit = bit & ~reg;
 8001298:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800129c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
		bit = bit | reg;
 80012a0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80012a4:	f899 2010 	ldrb.w	r2, [r9, #16]
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	f000 80df 	beq.w	800146c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x694>
 80012ae:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80012b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
		bit = bit & ~reg;
 80012b6:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80012ba:	f8d8 0000 	ldr.w	r0, [r8]
 80012be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80012c2:	ab0e      	add	r3, sp, #56	; 0x38
 80012c4:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80012c8:	f8c3 02a0 	str.w	r0, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80012cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80012ce:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012d2:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 80012d6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80012da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012de:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80012e2:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80012e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ea:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80012ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80012f2:	2a00      	cmp	r2, #0
 80012f4:	f040 80bf 	bne.w	8001476 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x69e>
		bit = bit & ~reg;
 80012f8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80012fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
		bit = bit | reg;
 8001300:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001304:	f898 2010 	ldrb.w	r2, [r8, #16]
 8001308:	2a00      	cmp	r2, #0
 800130a:	f000 80b9 	beq.w	8001480 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6a8>
 800130e:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001312:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
		bit = bit & ~reg;
 8001316:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800131a:	6838      	ldr	r0, [r7, #0]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	ab0e      	add	r3, sp, #56	; 0x38
 8001320:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8001324:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001328:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800132a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800132e:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
 8001332:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800133a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800133e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001346:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	2a00      	cmp	r2, #0
 800134e:	f040 809c 	bne.w	800148a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6b2>
		bit = bit & ~reg;
 8001352:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
		bit = bit | reg;
 800135a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 800135e:	7c3a      	ldrb	r2, [r7, #16]
 8001360:	2a00      	cmp	r2, #0
 8001362:	f000 8097 	beq.w	8001494 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6bc>
 8001366:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800136a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		bit = bit & ~reg;
 800136e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8001372:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6cc>)
 8001374:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);

		// clear FINIT
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
	}
 8001380:	b011      	add	sp, #68	; 0x44
 8001382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bit = bit | reg;
 8001386:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800138a:	f042 0201 	orr.w	r2, r2, #1
 800138e:	e581      	b.n	8000e94 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbc>
		bit = bit & ~reg;
 8001390:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001394:	f022 0201 	bic.w	r2, r2, #1
 8001398:	e586      	b.n	8000ea8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>
		bit = bit | reg;
 800139a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800139e:	f042 0202 	orr.w	r2, r2, #2
 80013a2:	e5a3      	b.n	8000eec <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x114>
		bit = bit & ~reg;
 80013a4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80013a8:	f022 0202 	bic.w	r2, r2, #2
 80013ac:	e5a8      	b.n	8000f00 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x128>
		bit = bit | reg;
 80013ae:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80013b2:	f042 0204 	orr.w	r2, r2, #4
 80013b6:	e5c5      	b.n	8000f44 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x16c>
		bit = bit & ~reg;
 80013b8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80013bc:	f022 0204 	bic.w	r2, r2, #4
 80013c0:	e5ca      	b.n	8000f58 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x180>
		bit = bit | reg;
 80013c2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80013c6:	f042 0208 	orr.w	r2, r2, #8
 80013ca:	e5e9      	b.n	8000fa0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c8>
		bit = bit & ~reg;
 80013cc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80013d0:	f022 0208 	bic.w	r2, r2, #8
 80013d4:	e5ef      	b.n	8000fb6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1de>
		bit = bit | reg;
 80013d6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80013da:	f042 0210 	orr.w	r2, r2, #16
 80013de:	e60e      	b.n	8000ffe <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x226>
		bit = bit & ~reg;
 80013e0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80013e4:	f022 0210 	bic.w	r2, r2, #16
 80013e8:	e614      	b.n	8001014 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x23c>
		bit = bit | reg;
 80013ea:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80013ee:	f042 0220 	orr.w	r2, r2, #32
 80013f2:	e633      	b.n	800105c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x284>
		bit = bit & ~reg;
 80013f4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80013f8:	f022 0220 	bic.w	r2, r2, #32
 80013fc:	e639      	b.n	8001072 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x29a>
		bit = bit | reg;
 80013fe:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001406:	e658      	b.n	80010ba <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2e2>
		bit = bit & ~reg;
 8001408:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800140c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001410:	e65e      	b.n	80010d0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2f8>
		bit = bit | reg;
 8001412:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800141a:	e67d      	b.n	8001118 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x340>
		bit = bit & ~reg;
 800141c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001424:	e683      	b.n	800112e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x356>
		bit = bit | reg;
 8001426:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800142a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800142e:	e6a7      	b.n	8001180 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
		bit = bit & ~reg;
 8001430:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001438:	e6ad      	b.n	8001196 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3be>
		bit = bit | reg;
 800143a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800143e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001442:	e6cd      	b.n	80011e0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x408>
		bit = bit & ~reg;
 8001444:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001448:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800144c:	e6d3      	b.n	80011f6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x41e>
		bit = bit | reg;
 800144e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001456:	e6f3      	b.n	8001240 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x468>
		bit = bit & ~reg;
 8001458:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800145c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001460:	e6f9      	b.n	8001256 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x47e>
		bit = bit | reg;
 8001462:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800146a:	e719      	b.n	80012a0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4c8>
		bit = bit & ~reg;
 800146c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001474:	e71f      	b.n	80012b6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4de>
		bit = bit | reg;
 8001476:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800147a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800147e:	e73f      	b.n	8001300 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x528>
		bit = bit & ~reg;
 8001480:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001484:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001488:	e745      	b.n	8001316 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x53e>
		bit = bit | reg;
 800148a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800148e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001492:	e762      	b.n	800135a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x582>
		bit = bit & ~reg;
 8001494:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800149c:	e767      	b.n	800136e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x596>
 800149e:	bf00      	nop
 80014a0:	40006400 	.word	0x40006400
 80014a4:	40006000 	.word	0x40006000

080014a8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 80014aa:	1e54      	subs	r4, r2, #1
 80014ac:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80014b0:	1065      	asrs	r5, r4, #1
 80014b2:	460c      	mov	r4, r1
 80014b4:	42a5      	cmp	r5, r4
 80014b6:	dd13      	ble.n	80014e0 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 80014b8:	1c67      	adds	r7, r4, #1
 80014ba:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 80014be:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 80014c0:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 80014c4:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 80014c8:	f00c 0c03 	and.w	ip, ip, #3
 80014cc:	f007 0703 	and.w	r7, r7, #3
 80014d0:	45bc      	cmp	ip, r7
	    __secondChild--;
 80014d2:	bf88      	it	hi
 80014d4:	f106 36ff 	addhi.w	r6, r6, #4294967295	; 0xffffffff
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80014d8:	5d87      	ldrb	r7, [r0, r6]
 80014da:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 80014dc:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 80014de:	e7e9      	b.n	80014b4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80014e0:	07d5      	lsls	r5, r2, #31
 80014e2:	d40d      	bmi.n	8001500 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 80014e4:	3a02      	subs	r2, #2
 80014e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80014ea:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 80014ee:	d107      	bne.n	8001500 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 80014f0:	1c62      	adds	r2, r4, #1
 80014f2:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80014f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80014f8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80014fc:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 80014fe:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8001500:	1e62      	subs	r2, r4, #1
 8001502:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001506:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001508:	f003 0603 	and.w	r6, r3, #3
 800150c:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800150e:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001512:	da0b      	bge.n	800152c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 8001514:	5c84      	ldrb	r4, [r0, r2]
 8001516:	f004 0703 	and.w	r7, r4, #3
 800151a:	42b7      	cmp	r7, r6
 800151c:	d206      	bcs.n	800152c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800151e:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 8001520:	1e54      	subs	r4, r2, #1
 8001522:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8001526:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8001528:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800152a:	e7ef      	b.n	800150c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800152c:	702b      	strb	r3, [r5, #0]
    }
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001530 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8001530:	b082      	sub	sp, #8
 8001532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4617      	mov	r7, r2
 800153c:	b087      	sub	sp, #28
 800153e:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8001540:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 8001544:	1b2e      	subs	r6, r5, r4
 8001546:	2e10      	cmp	r6, #16
 8001548:	dd29      	ble.n	800159e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 800154a:	bb6f      	cbnz	r7, 80015a8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 800154c:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8001550:	f10d 0808 	add.w	r8, sp, #8
 8001554:	f10d 0910 	add.w	r9, sp, #16
 8001558:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 800155c:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8001560:	1eb7      	subs	r7, r6, #2
 8001562:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8001564:	e899 0003 	ldmia.w	r9, {r0, r1}
 8001568:	4632      	mov	r2, r6
 800156a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800156e:	5de3      	ldrb	r3, [r4, r7]
 8001570:	4639      	mov	r1, r7
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff ff98 	bl	80014a8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8001578:	b10f      	cbz	r7, 800157e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 800157a:	3f01      	subs	r7, #1
      while (true)
 800157c:	e7f2      	b.n	8001564 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800157e:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8001582:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8001584:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8001586:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800158a:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 800158c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001590:	4632      	mov	r2, r6
 8001592:	2100      	movs	r1, #0
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff ff87 	bl	80014a8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 800159a:	2e01      	cmp	r6, #1
 800159c:	dcef      	bgt.n	800157e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 800159e:	b007      	add	sp, #28
 80015a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015a4:	b002      	add	sp, #8
 80015a6:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80015a8:	1076      	asrs	r6, r6, #1
 80015aa:	f894 e001 	ldrb.w	lr, [r4, #1]
 80015ae:	5da1      	ldrb	r1, [r4, r6]
 80015b0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 80015b4:	f00e 0903 	and.w	r9, lr, #3
 80015b8:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 80015bc:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80015be:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 80015c0:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80015c4:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 80015c8:	d229      	bcs.n	800161e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 80015ca:	4594      	cmp	ip, r2
 80015cc:	d221      	bcs.n	8001612 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 80015ce:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80015d0:	55a3      	strb	r3, [r4, r6]
 80015d2:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 80015d4:	462b      	mov	r3, r5
 80015d6:	4616      	mov	r6, r2
 80015d8:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80015da:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80015de:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 80015e2:	f00c 0003 	and.w	r0, ip, #3
 80015e6:	4288      	cmp	r0, r1
 80015e8:	d3f5      	bcc.n	80015d6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80015ee:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 80015f2:	f00e 0903 	and.w	r9, lr, #3
 80015f6:	4549      	cmp	r1, r9
 80015f8:	d3f8      	bcc.n	80015ec <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 80015fa:	429e      	cmp	r6, r3
 80015fc:	d318      	bcc.n	8001630 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80015fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001600:	4629      	mov	r1, r5
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	463a      	mov	r2, r7
 8001606:	4630      	mov	r0, r6
 8001608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800160a:	f7ff ff91 	bl	8001530 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 800160e:	4635      	mov	r5, r6
 8001610:	e798      	b.n	8001544 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8001612:	4591      	cmp	r9, r2
 8001614:	d205      	bcs.n	8001622 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8001616:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001618:	f805 3c01 	strb.w	r3, [r5, #-1]
 800161c:	e7d9      	b.n	80015d2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 800161e:	4591      	cmp	r9, r2
 8001620:	d203      	bcs.n	800162a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8001622:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001626:	7063      	strb	r3, [r4, #1]
 8001628:	e7d3      	b.n	80015d2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 800162a:	4594      	cmp	ip, r2
 800162c:	d2cf      	bcs.n	80015ce <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 800162e:	e7f2      	b.n	8001616 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8001630:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8001634:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8001638:	e7cd      	b.n	80015d6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

0800163a <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
 800163a:	688b      	ldr	r3, [r1, #8]
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 800163e:	2800      	cmp	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001640:	4614      	mov	r4, r2
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8001642:	bf0c      	ite	eq
 8001644:	2220      	moveq	r2, #32
 8001646:	2200      	movne	r2, #0
 8001648:	2b01      	cmp	r3, #1
 800164a:	bf0c      	ite	eq
 800164c:	2310      	moveq	r3, #16
 800164e:	2300      	movne	r3, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001650:	460d      	mov	r5, r1
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
 8001652:	68a1      	ldr	r1, [r4, #8]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8001654:	2802      	cmp	r0, #2
 8001656:	ea42 0203 	orr.w	r2, r2, r3
 800165a:	bf34      	ite	cc
 800165c:	2320      	movcc	r3, #32
 800165e:	2300      	movcs	r3, #0
 8001660:	2901      	cmp	r1, #1
 8001662:	bf0c      	ite	eq
 8001664:	2110      	moveq	r1, #16
 8001666:	2100      	movne	r1, #0
 8001668:	430b      	orrs	r3, r1
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 800166a:	b08d      	sub	sp, #52	; 0x34
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 800166c:	f043 0305 	orr.w	r3, r3, #5
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001670:	f88d 3015 	strb.w	r3, [sp, #21]
 8001674:	f04f 0300 	mov.w	r3, #0
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8001678:	f042 0204 	orr.w	r2, r2, #4
 800167c:	ae0a      	add	r6, sp, #40	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 800167e:	f88d 2014 	strb.w	r2, [sp, #20]
 8001682:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001686:	f88d 3020 	strb.w	r3, [sp, #32]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 800168a:	a805      	add	r0, sp, #20
 800168c:	ab08      	add	r3, sp, #32
 800168e:	4632      	mov	r2, r6
 8001690:	f10d 0116 	add.w	r1, sp, #22
 8001694:	9307      	str	r3, [sp, #28]
 8001696:	9606      	str	r6, [sp, #24]
 8001698:	f7ff f98e 	bl	80009b8 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 800169c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80016a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80016a4:	f010 0030 	ands.w	r0, r0, #48	; 0x30
 80016a8:	d003      	beq.n	80016b2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x78>
 80016aa:	2810      	cmp	r0, #16
					priority |= (i << 6);
 80016ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80016b0:	d003      	beq.n	80016ba <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x80>
 80016b2:	2820      	cmp	r0, #32
					priority |= (i << 6);
 80016b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80016b8:	d003      	beq.n	80016c2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x88>
 80016ba:	2830      	cmp	r0, #48	; 0x30
					priority |= (i << 6);
 80016bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 80016c0:	d001      	beq.n	80016c6 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x8c>
					priority |= (i << 6);
 80016c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 80016c6:	f88d 3015 	strb.w	r3, [sp, #21]
 80016ca:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 80016ce:	af03      	add	r7, sp, #12
 80016d0:	f88d 3010 	strb.w	r3, [sp, #16]
 80016d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80016d8:	f10d 0116 	add.w	r1, sp, #22
 80016dc:	ab04      	add	r3, sp, #16
 80016de:	a805      	add	r0, sp, #20
 80016e0:	2202      	movs	r2, #2
 80016e2:	9700      	str	r7, [sp, #0]
 80016e4:	9308      	str	r3, [sp, #32]
 80016e6:	9709      	str	r7, [sp, #36]	; 0x24
 80016e8:	f7ff ff22 	bl	8001530 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
 80016ec:	ab04      	add	r3, sp, #16
 80016ee:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
	std::__insertion_sort(__first, __last, __comp);
 80016f2:	f10d 0116 	add.w	r1, sp, #22
 80016f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80016fa:	a805      	add	r0, sp, #20
 80016fc:	f7ff f880 	bl	8000800 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0EEJLNS9_10FilterModeE0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001700:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	60eb      	str	r3, [r5, #12]
 8001708:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	60e3      	str	r3, [r4, #12]
		}
 8001710:	b00d      	add	sp, #52	; 0x34
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001714 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001714:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001716:	4606      	mov	r6, r0
 8001718:	460d      	mov	r5, r1
 800171a:	4614      	mov	r4, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 800171c:	f7ff ff8d 	bl	800163a <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0EEJLNS0_10FilterModeE0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit = bit | reg;
 8001720:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 8001722:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 800172e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001732:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001736:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 800173a:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 800173e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8001742:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001746:	466a      	mov	r2, sp
 8001748:	6869      	ldr	r1, [r5, #4]
 800174a:	6828      	ldr	r0, [r5, #0]
 800174c:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800174e:	4a35      	ldr	r2, [pc, #212]	; (8001824 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 8001750:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001754:	9901      	ldr	r1, [sp, #4]
 8001756:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 800175a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 8001766:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001772:	68aa      	ldr	r2, [r5, #8]
 8001774:	2a00      	cmp	r2, #0
 8001776:	d13f      	bne.n	80017f8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xe4>
 8001778:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800177c:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 8001780:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001784:	7c2a      	ldrb	r2, [r5, #16]
 8001786:	2a00      	cmp	r2, #0
 8001788:	d03b      	beq.n	8001802 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xee>
 800178a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800178e:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 8001792:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001796:	466b      	mov	r3, sp
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	6861      	ldr	r1, [r4, #4]
 800179c:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x110>)
 80017a0:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80017a4:	9a01      	ldr	r2, [sp, #4]
		bit = bit | reg;
 80017a6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80017aa:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 80017ae:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80017b2:	f042 0202 	orr.w	r2, r2, #2
 80017b6:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
		bit = bit & ~reg;
 80017ba:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80017be:	f022 0202 	bic.w	r2, r2, #2
 80017c2:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80017c6:	68a2      	ldr	r2, [r4, #8]
 80017c8:	bb02      	cbnz	r2, 800180c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xf8>
 80017ca:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80017ce:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 80017d2:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80017d6:	7c22      	ldrb	r2, [r4, #16]
 80017d8:	b1ea      	cbz	r2, 8001816 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x102>
 80017da:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80017de:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 80017e2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x10c>)
 80017e8:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
	}
 80017f4:	b002      	add	sp, #8
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
		bit = bit | reg;
 80017f8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	e7be      	b.n	8001780 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c>
		bit = bit & ~reg;
 8001802:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	e7c2      	b.n	8001792 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x7e>
		bit = bit | reg;
 800180c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001810:	f042 0202 	orr.w	r2, r2, #2
 8001814:	e7dd      	b.n	80017d2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbe>
		bit = bit & ~reg;
 8001816:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800181a:	f022 0202 	bic.w	r2, r2, #2
 800181e:	e7e0      	b.n	80017e2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xce>
 8001820:	40006000 	.word	0x40006000
 8001824:	40006400 	.word	0x40006400

08001828 <main_cpp>:
extern "C"
{
	extern TIM_HandleTypeDef htim1;

	void main_cpp()
		{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b0ad      	sub	sp, #180	; 0xb4
			auto hcan = Implement::crslib_default_hcan(CAN1);
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <main_cpp+0x13c>)
 800182e:	494e      	ldr	r1, [pc, #312]	; (8001968 <main_cpp+0x140>)
 8001830:	a822      	add	r0, sp, #136	; 0x88
 8001832:	f7fe ff7a 	bl	800072a <_ZN6CRSLib3Can6RM00089Implement19crslib_default_hcanEP11CAN_TypeDefNS1_7BitrateE>
			hcan.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8001836:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
			fifo_index{fifo_index}
 800183a:	2500      	movs	r5, #0
 800183c:	2701      	movs	r7, #1
			HAL_CAN_DeInit(&hcan);
 800183e:	a822      	add	r0, sp, #136	; 0x88
			hcan.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8001840:	9324      	str	r3, [sp, #144]	; 0x90
	inline void dynamic_initialize() noexcept
	{
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8001842:	4e4a      	ldr	r6, [pc, #296]	; (800196c <main_cpp+0x144>)
			HAL_CAN_DeInit(&hcan);
 8001844:	f000 fa2f 	bl	8001ca6 <HAL_CAN_DeInit>
			HAL_CAN_Init(&hcan);
 8001848:	a822      	add	r0, sp, #136	; 0x88
 800184a:	f000 f931 	bl	8001ab0 <HAL_CAN_Init>
 800184e:	ac1c      	add	r4, sp, #112	; 0x70
	{
		CAN_HandleTypeDef * hcan;

	public:
		Pillarbox(CAN_HandleTypeDef *const hcan) noexcept:
			hcan{hcan}
 8001850:	ab22      	add	r3, sp, #136	; 0x88
 8001852:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
 8001856:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800185a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800185c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185e:	6833      	ldr	r3, [r6, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8001860:	200e      	movs	r0, #14
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8001862:	6023      	str	r3, [r4, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8001864:	ac1c      	add	r4, sp, #112	; 0x70
 8001866:	4623      	mov	r3, r4
 8001868:	4622      	mov	r2, r4
 800186a:	4621      	mov	r1, r4
 800186c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001870:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001874:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001878:	9400      	str	r4, [sp, #0]
 800187a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800187e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001882:	9711      	str	r7, [sp, #68]	; 0x44
 8001884:	f7ff faa8 	bl	8000dd8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
				{
					.filter = filter1,
					.fifo = FifoIndex::fifo0,
					.filter_match_index = 0, // なんでもいい。
					.activate = true
				};
 8001888:	f06f 0301 	mvn.w	r3, #1
 800188c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001890:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
				{
					.filter = filter2,
					.fifo = FifoIndex::fifo1,
					.filter_match_index = 0, // なんでもいい。
					.activate = true
				};
 8001894:	4a36      	ldr	r2, [pc, #216]	; (8001970 <main_cpp+0x148>)

			FilterManager::config_filter_bank(15, filter_arg1, filter_arg2);
 8001896:	a912      	add	r1, sp, #72	; 0x48
				};
 8001898:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
			FilterManager::config_filter_bank(15, filter_arg1, filter_arg2);
 800189c:	200f      	movs	r0, #15
 800189e:	aa17      	add	r2, sp, #92	; 0x5c
			FilterManager::ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filter_arg2
 80018a0:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
			FilterManager::ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filter_arg1
 80018a4:	9516      	str	r5, [sp, #88]	; 0x58
 80018a6:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
 80018aa:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
			FilterManager::ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filter_arg2
 80018ae:	9719      	str	r7, [sp, #100]	; 0x64
 80018b0:	f88d 706c 	strb.w	r7, [sp, #108]	; 0x6c
			FilterManager::config_filter_bank(15, filter_arg1, filter_arg2);
 80018b4:	f7ff ff2e 	bl	8001714 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0EEJLNS0_10FilterModeE0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>

			HAL_CAN_Start(&hcan);
 80018b8:	a822      	add	r0, sp, #136	; 0x88
 80018ba:	f000 fa17 	bl	8001cec <HAL_CAN_Start>

			//CH1,2,3,4 は PA8,9,10,11 に 対応

			//PWM生成
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018be:	4629      	mov	r1, r5
 80018c0:	482c      	ldr	r0, [pc, #176]	; (8001974 <main_cpp+0x14c>)
 80018c2:	f001 fbab 	bl	800301c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018c6:	2104      	movs	r1, #4
 80018c8:	482a      	ldr	r0, [pc, #168]	; (8001974 <main_cpp+0x14c>)
 80018ca:	f001 fba7 	bl	800301c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018ce:	2108      	movs	r1, #8
 80018d0:	4828      	ldr	r0, [pc, #160]	; (8001974 <main_cpp+0x14c>)
 80018d2:	f001 fba3 	bl	800301c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018d6:	210c      	movs	r1, #12
 80018d8:	4826      	ldr	r0, [pc, #152]	; (8001974 <main_cpp+0x14c>)
 80018da:	f001 fb9f 	bl	800301c <HAL_TIM_PWM_Start>

			[[maybe_unused]] volatile int dummy = 0;
 80018de:	950c      	str	r5, [sp, #48]	; 0x30
 80018e0:	4d24      	ldr	r5, [pc, #144]	; (8001974 <main_cpp+0x14c>)
			while(true)
			{
				dummy = 1;
 80018e2:	2701      	movs	r7, #1

		bool empty() const noexcept
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 80018e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80018e8:	970c      	str	r7, [sp, #48]	; 0x30
 80018ea:	f000 fb9d 	bl	8002028 <HAL_CAN_GetRxFifoFillLevel>
					tx_frame.data[0] = live_expr_open;

					can_manager.pillarbox.post(0x500, tx_frame);
				}*/

				if(!can_manager.letterbox0.empty())
 80018ee:	b1a8      	cbz	r0, 800191c <main_cpp+0xf4>
				{
					RxFrame rx_frame{};
 80018f0:	2218      	movs	r2, #24
 80018f2:	2100      	movs	r1, #0
 80018f4:	4620      	mov	r0, r4
 80018f6:	f002 f947 	bl	8003b88 <memset>
					can_manager.letterbox0.receive(rx_frame);
 80018fa:	4621      	mov	r1, r4
 80018fc:	a80e      	add	r0, sp, #56	; 0x38
 80018fe:	f7fe fef1 	bl	80006e4 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>
					if(open) //オープン
 8001902:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8001906:	b333      	cbz	r3, 8001956 <main_cpp+0x12e>
						__HAL_TIM_SET_COMPARE(&htim1, ch1, open_duty);
 8001908:	f240 464c 	movw	r6, #1100	; 0x44c
 800190c:	682b      	ldr	r3, [r5, #0]
						__HAL_TIM_SET_COMPARE(&htim1, ch1, close_duty);
 800190e:	635e      	str	r6, [r3, #52]	; 0x34
						HAL_Delay(1000);
 8001910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001914:	f000 f8a8 	bl	8001a68 <HAL_Delay>
						__HAL_TIM_SET_COMPARE(&htim1, ch2, close_duty);
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	639e      	str	r6, [r3, #56]	; 0x38
 800191c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001920:	f000 fb82 	bl	8002028 <HAL_CAN_GetRxFifoFillLevel>

					// 上段
					open_or_close(open, TIM_CHANNEL_1, TIM_CHANNEL_2);

				}
				if(!can_manager.letterbox1.empty())
 8001924:	2800      	cmp	r0, #0
 8001926:	d0dd      	beq.n	80018e4 <main_cpp+0xbc>
				{
					RxFrame rx_frame{};
 8001928:	2218      	movs	r2, #24
 800192a:	2100      	movs	r1, #0
 800192c:	4620      	mov	r0, r4
 800192e:	f002 f92b 	bl	8003b88 <memset>
					can_manager.letterbox1.receive(rx_frame);
 8001932:	4621      	mov	r1, r4
 8001934:	a810      	add	r0, sp, #64	; 0x40
 8001936:	f7fe fed5 	bl	80006e4 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>
					if(open) //オープン
 800193a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 800193e:	b16b      	cbz	r3, 800195c <main_cpp+0x134>
						__HAL_TIM_SET_COMPARE(&htim1, ch1, open_duty);
 8001940:	f240 464c 	movw	r6, #1100	; 0x44c
 8001944:	682b      	ldr	r3, [r5, #0]
						__HAL_TIM_SET_COMPARE(&htim1, ch1, close_duty);
 8001946:	63de      	str	r6, [r3, #60]	; 0x3c
						HAL_Delay(1000);
 8001948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800194c:	f000 f88c 	bl	8001a68 <HAL_Delay>
						__HAL_TIM_SET_COMPARE(&htim1, ch2, close_duty);
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	641e      	str	r6, [r3, #64]	; 0x40
 8001954:	e7c5      	b.n	80018e2 <main_cpp+0xba>
						__HAL_TIM_SET_COMPARE(&htim1, ch1, close_duty);
 8001956:	2664      	movs	r6, #100	; 0x64
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	e7d8      	b.n	800190e <main_cpp+0xe6>
 800195c:	2664      	movs	r6, #100	; 0x64
 800195e:	682b      	ldr	r3, [r5, #0]
 8001960:	e7f1      	b.n	8001946 <main_cpp+0x11e>
 8001962:	bf00      	nop
 8001964:	000f4240 	.word	0x000f4240
 8001968:	40006400 	.word	0x40006400
 800196c:	08003bb0 	.word	0x08003bb0
 8001970:	a0200000 	.word	0xa0200000
 8001974:	20000050 	.word	0x20000050

08001978 <Reset_Handler>:
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <LoopFillZerobss+0x14>)
  ldr r4, =_ebss
 800197a:	4c08      	ldr	r4, [pc, #32]	; (800199c <LoopFillZerobss+0x18>)
  movs r3, #0
 800197c:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197e:	e001      	b.n	8001984 <LoopFillZerobss>

08001980 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001980:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001982:	3204      	adds	r2, #4

08001984 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001984:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001986:	d3fb      	bcc.n	8001980 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001988:	f7fe fe93 	bl	80006b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198c:	f002 f8be 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001990:	f7fe fbdc 	bl	800014c <main>
  bx lr
 8001994:	4770      	bx	lr
 8001996:	0000      	.short	0x0000
  ldr r2, =_sbss
 8001998:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800199c:	2000009c 	.word	0x2000009c

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fc0f 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	200f      	movs	r0, #15
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7fe fd4e 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fc19 	bl	8002226 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a0c:	f000 fbef 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000098 	.word	0x20000098

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	20000098 	.word	0x20000098

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0ed      	b.n	8001c9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fcf8 	bl	80004c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae4:	f7ff ffb6 	bl	8001a54 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aea:	e012      	b.n	8001b12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aec:	f7ff ffb2 	bl	8001a54 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b0a      	cmp	r3, #10
 8001af8:	d90b      	bls.n	8001b12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0c5      	b.n	8001c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0e5      	beq.n	8001aec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0202 	bic.w	r2, r2, #2
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b30:	f7ff ff90 	bl	8001a54 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b36:	e012      	b.n	8001b5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b38:	f7ff ff8c 	bl	8001a54 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d90b      	bls.n	8001b5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2205      	movs	r2, #5
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e09f      	b.n	8001c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e5      	bne.n	8001b38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d108      	bne.n	8001b86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e007      	b.n	8001b96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	7e5b      	ldrb	r3, [r3, #25]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d108      	bne.n	8001bb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	e007      	b.n	8001bc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7e9b      	ldrb	r3, [r3, #26]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0220 	orr.w	r2, r2, #32
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0220 	bic.w	r2, r2, #32
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7edb      	ldrb	r3, [r3, #27]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d108      	bne.n	8001c04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0210 	bic.w	r2, r2, #16
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e007      	b.n	8001c14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0210 	orr.w	r2, r2, #16
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7f1b      	ldrb	r3, [r3, #28]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d108      	bne.n	8001c2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e007      	b.n	8001c3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7f5b      	ldrb	r3, [r3, #29]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0204 	orr.w	r2, r2, #4
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e007      	b.n	8001c68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0204 	bic.w	r2, r2, #4
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	ea42 0103 	orr.w	r1, r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	1e5a      	subs	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e015      	b.n	8001ce4 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f85b 	bl	8001d74 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fc60 	bl	8000584 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d12e      	bne.n	8001d5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0201 	bic.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d18:	f7ff fe9c 	bl	8001a54 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d1e:	e012      	b.n	8001d46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d20:	f7ff fe98 	bl	8001a54 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b0a      	cmp	r3, #10
 8001d2c:	d90b      	bls.n	8001d46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e012      	b.n	8001d6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e5      	bne.n	8001d20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e006      	b.n	8001d6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d133      	bne.n	8001df0 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff fe5c 	bl	8001a54 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff fe58 	bl	8001a54 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01b      	b.n	8001dfe <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0e5      	beq.n	8001da0 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0202 	bic.w	r2, r2, #2
 8001de2:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e006      	b.n	8001dfe <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e06:	b480      	push	{r7}
 8001e08:	b087      	sub	sp, #28
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d003      	beq.n	8001e2a <HAL_CAN_GetRxMessage+0x24>
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	f040 80f3 	bne.w	8002010 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10e      	bne.n	8001e4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d8      	b.n	800201e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	331b      	adds	r3, #27
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4413      	add	r3, r2
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0204 	and.w	r2, r3, #4
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	331b      	adds	r3, #27
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	4413      	add	r3, r2
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0d5b      	lsrs	r3, r3, #21
 8001e9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	331b      	adds	r3, #27
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	331b      	adds	r3, #27
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0202 	and.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	331b      	adds	r3, #27
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 020f 	and.w	r2, r3, #15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	331b      	adds	r3, #27
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	331b      	adds	r3, #27
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0a1a      	lsrs	r2, r3, #8
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	0c1a      	lsrs	r2, r3, #16
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0e1a      	lsrs	r2, r3, #24
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3303      	adds	r3, #3
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0a1a      	lsrs	r2, r3, #8
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	3305      	adds	r3, #5
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0c1a      	lsrs	r2, r3, #16
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3306      	adds	r3, #6
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e1a      	lsrs	r2, r3, #24
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3307      	adds	r3, #7
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0220 	orr.w	r2, r2, #32
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	e007      	b.n	800200c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e006      	b.n	800201e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800203c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d002      	beq.n	800204a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d10f      	bne.n	800206a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	e005      	b.n	800206a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021b8:	f7ff ff90 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff49 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff5e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff90 	bl	8002130 <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5f 	bl	80020dc <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffb0 	bl	8002194 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	e169      	b.n	8002528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002254:	2201      	movs	r2, #1
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8158 	bne.w	8002522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a9a      	ldr	r2, [pc, #616]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d05e      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 800227c:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d875      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 8002282:	4a98      	ldr	r2, [pc, #608]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d058      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002288:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d86f      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800228e:	4a96      	ldr	r2, [pc, #600]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d052      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002294:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d869      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800229a:	4a94      	ldr	r2, [pc, #592]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04c      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022a0:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d863      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d046      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022ac:	4a90      	ldr	r2, [pc, #576]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d85d      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d82a      	bhi.n	800230c <HAL_GPIO_Init+0xcc>
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d859      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <HAL_GPIO_Init+0x80>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	08002315 	.word	0x08002315
 80022c8:	08002327 	.word	0x08002327
 80022cc:	08002369 	.word	0x08002369
 80022d0:	0800236f 	.word	0x0800236f
 80022d4:	0800236f 	.word	0x0800236f
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	0800236f 	.word	0x0800236f
 80022e0:	0800236f 	.word	0x0800236f
 80022e4:	0800236f 	.word	0x0800236f
 80022e8:	0800236f 	.word	0x0800236f
 80022ec:	0800236f 	.word	0x0800236f
 80022f0:	0800236f 	.word	0x0800236f
 80022f4:	0800236f 	.word	0x0800236f
 80022f8:	0800236f 	.word	0x0800236f
 80022fc:	0800236f 	.word	0x0800236f
 8002300:	0800236f 	.word	0x0800236f
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002331 	.word	0x08002331
 800230c:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <HAL_GPIO_Init+0x2b4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002312:	e02c      	b.n	800236e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e029      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	3304      	adds	r3, #4
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e024      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	3308      	adds	r3, #8
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e01f      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	330c      	adds	r3, #12
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e01a      	b.n	8002370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002342:	2304      	movs	r3, #4
 8002344:	623b      	str	r3, [r7, #32]
          break;
 8002346:	e013      	b.n	8002370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	611a      	str	r2, [r3, #16]
          break;
 800235a:	e009      	b.n	8002370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	615a      	str	r2, [r3, #20]
          break;
 8002366:	e003      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x130>
          break;
 800236e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d801      	bhi.n	800237a <HAL_GPIO_Init+0x13a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <HAL_GPIO_Init+0x13e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d802      	bhi.n	800238c <HAL_GPIO_Init+0x14c>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x152>
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3b08      	subs	r3, #8
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	210f      	movs	r1, #15
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80b1 	beq.w	8002522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1ec>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <HAL_GPIO_Init+0x2c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1e8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_GPIO_Init+0x2cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1e0>
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002420:	2304      	movs	r3, #4
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 800242c:	2300      	movs	r3, #0
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4093      	lsls	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243e:	492f      	ldr	r1, [pc, #188]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	492c      	ldr	r1, [pc, #176]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4928      	ldr	r1, [pc, #160]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	43db      	mvns	r3, r3
 8002496:	491e      	ldr	r1, [pc, #120]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002498:	4013      	ands	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4914      	ldr	r1, [pc, #80]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d021      	beq.n	8002514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
 80024dc:	e021      	b.n	8002522 <HAL_GPIO_Init+0x2e2>
 80024de:	bf00      	nop
 80024e0:	10320000 	.word	0x10320000
 80024e4:	10310000 	.word	0x10310000
 80024e8:	10220000 	.word	0x10220000
 80024ec:	10210000 	.word	0x10210000
 80024f0:	10120000 	.word	0x10120000
 80024f4:	10110000 	.word	0x10110000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	40010800 	.word	0x40010800
 8002504:	40010c00 	.word	0x40010c00
 8002508:	40011000 	.word	0x40011000
 800250c:	40011400 	.word	0x40011400
 8002510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_GPIO_Init+0x304>)
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	43db      	mvns	r3, r3
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <HAL_GPIO_Init+0x304>)
 800251e:	4013      	ands	r3, r2
 8002520:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f47f ae8e 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	372c      	adds	r7, #44	; 0x2c
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002556:	e09a      	b.n	800268e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 808d 	beq.w	8002688 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800256e:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_GPIO_DeInit+0x160>)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	220f      	movs	r2, #15
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a46      	ldr	r2, [pc, #280]	; (80026ac <HAL_GPIO_DeInit+0x164>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <HAL_GPIO_DeInit+0x78>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a45      	ldr	r2, [pc, #276]	; (80026b0 <HAL_GPIO_DeInit+0x168>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00d      	beq.n	80025bc <HAL_GPIO_DeInit+0x74>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <HAL_GPIO_DeInit+0x16c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <HAL_GPIO_DeInit+0x70>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_GPIO_DeInit+0x170>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_GPIO_DeInit+0x6c>
 80025b0:	2303      	movs	r3, #3
 80025b2:	e006      	b.n	80025c2 <HAL_GPIO_DeInit+0x7a>
 80025b4:	2304      	movs	r3, #4
 80025b6:	e004      	b.n	80025c2 <HAL_GPIO_DeInit+0x7a>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e002      	b.n	80025c2 <HAL_GPIO_DeInit+0x7a>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_GPIO_DeInit+0x7a>
 80025c0:	2300      	movs	r3, #0
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	f002 0203 	and.w	r2, r2, #3
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	4093      	lsls	r3, r2
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d132      	bne.n	8002638 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80025e2:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_GPIO_DeInit+0x160>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	089b      	lsrs	r3, r3, #2
 80025e8:	3302      	adds	r3, #2
 80025ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	43da      	mvns	r2, r3
 80025f2:	482d      	ldr	r0, [pc, #180]	; (80026a8 <HAL_GPIO_DeInit+0x160>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	400a      	ands	r2, r1
 80025fa:	3302      	adds	r3, #2
 80025fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	43db      	mvns	r3, r3
 8002608:	492c      	ldr	r1, [pc, #176]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 800260a:	4013      	ands	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800260e:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	43db      	mvns	r3, r3
 8002616:	4929      	ldr	r1, [pc, #164]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 8002618:	4013      	ands	r3, r2
 800261a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	4925      	ldr	r1, [pc, #148]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 8002626:	4013      	ands	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	4922      	ldr	r1, [pc, #136]	; (80026bc <HAL_GPIO_DeInit+0x174>)
 8002634:	4013      	ands	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2bff      	cmp	r3, #255	; 0xff
 800263c:	d801      	bhi.n	8002642 <HAL_GPIO_DeInit+0xfa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	e001      	b.n	8002646 <HAL_GPIO_DeInit+0xfe>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d802      	bhi.n	8002654 <HAL_GPIO_DeInit+0x10c>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	e002      	b.n	800265a <HAL_GPIO_DeInit+0x112>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	3b08      	subs	r3, #8
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	210f      	movs	r1, #15
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	401a      	ands	r2, r3
 800266c:	2104      	movs	r1, #4
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	431a      	orrs	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	3301      	adds	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f af5e 	bne.w	8002558 <HAL_GPIO_DeInit+0x10>
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40010800 	.word	0x40010800
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e272      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8087 	beq.w	80027ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e0:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d00c      	beq.n	8002706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d112      	bne.n	800271e <HAL_RCC_OscConfig+0x5e>
 80026f8:	4b8c      	ldr	r3, [pc, #560]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d10b      	bne.n	800271e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	4b89      	ldr	r3, [pc, #548]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d06c      	beq.n	80027ec <HAL_RCC_OscConfig+0x12c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d168      	bne.n	80027ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e24c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x76>
 8002728:	4b80      	ldr	r3, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a7f      	ldr	r2, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e02e      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x98>
 800273e:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7a      	ldr	r2, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0xbc>
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a67      	ldr	r2, [pc, #412]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff f95a 	bl	8001a54 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff f956 	bl	8001a54 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e200      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xe4>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff f946 	bl	8001a54 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff f942 	bl	8001a54 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1ec      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x10c>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fa:	4b4c      	ldr	r3, [pc, #304]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x18c>
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x176>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1c0      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4939      	ldr	r1, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7ff f8fb 	bl	8001a54 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7ff f8f7 	bl	8001a54 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1a1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4927      	ldr	r1, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff f8da 	bl	8001a54 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7ff f8d6 	bl	8001a54 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e180      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03a      	beq.n	8002944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_RCC_OscConfig+0x274>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7ff f8ba 	bl	8001a54 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7ff f8b6 	bl	8001a54 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e160      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002902:	2001      	movs	r0, #1
 8002904:	f000 fac4 	bl	8002e90 <RCC_Delay>
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_OscConfig+0x274>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7ff f8a0 	bl	8001a54 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002916:	e00f      	b.n	8002938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7ff f89c 	bl	8001a54 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d908      	bls.n	8002938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e146      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	42420000 	.word	0x42420000
 8002934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	4b92      	ldr	r3, [pc, #584]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e9      	bne.n	8002918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80a6 	beq.w	8002a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b8b      	ldr	r3, [pc, #556]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a87      	ldr	r2, [pc, #540]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b82      	ldr	r3, [pc, #520]	; (8002b88 <HAL_RCC_OscConfig+0x4c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298a:	4b7f      	ldr	r3, [pc, #508]	; (8002b88 <HAL_RCC_OscConfig+0x4c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a7e      	ldr	r2, [pc, #504]	; (8002b88 <HAL_RCC_OscConfig+0x4c8>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7ff f85d 	bl	8001a54 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7ff f859 	bl	8001a54 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e103      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <HAL_RCC_OscConfig+0x4c8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x312>
 80029c4:	4b6f      	ldr	r3, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a6e      	ldr	r2, [pc, #440]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e02d      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x334>
 80029da:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a69      	ldr	r2, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a66      	ldr	r2, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6213      	str	r3, [r2, #32]
 80029f2:	e01c      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x356>
 80029fc:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a60      	ldr	r2, [pc, #384]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 8002a16:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a5a      	ldr	r2, [pc, #360]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a57      	ldr	r2, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7ff f80d 	bl	8001a54 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7ff f809 	bl	8001a54 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0b1      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCC_OscConfig+0x37e>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fff7 	bl	8001a54 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fff3 	bl	8001a54 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e09b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a3b      	ldr	r2, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8087 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d061      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d146      	bne.n	8002b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe ffc7 	bl	8001a54 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe ffc3 	bl	8001a54 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e06d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	4921      	ldr	r1, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a19      	ldr	r1, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	430b      	orrs	r3, r1
 8002b16:	491b      	ldr	r1, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x4cc>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe ff97 	bl	8001a54 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe ff93 	bl	8001a54 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e03d      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x46a>
 8002b48:	e035      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe ff80 	bl	8001a54 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe ff7c 	bl	8001a54 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e026      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x498>
 8002b76:	e01e      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e019      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x500>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0d0      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4965      	ldr	r1, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d040      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e073      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06b      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4936      	ldr	r1, [pc, #216]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fece 	bl	8001a54 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe feca 	bl	8001a54 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e053      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d210      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4922      	ldr	r1, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d64:	5ccb      	ldrb	r3, [r1, r3]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1cc>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1d0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fe2c 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08003bd4 	.word	0x08003bd4
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b490      	push	{r4, r7}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002da0:	1d3c      	adds	r4, r7, #4
 8002da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002da8:	f240 2301 	movw	r3, #513	; 0x201
 8002dac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x46>
 8002dd6:	e02b      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dda:	623b      	str	r3, [r7, #32]
      break;
 8002ddc:	e02b      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	0c9b      	lsrs	r3, r3, #18
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3328      	adds	r3, #40	; 0x28
 8002de8:	443b      	add	r3, r7
 8002dea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0c5b      	lsrs	r3, r3, #17
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	3328      	adds	r3, #40	; 0x28
 8002e06:	443b      	add	r3, r7
 8002e08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e12:	fb03 f202 	mul.w	r2, r3, r2
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	e004      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	623b      	str	r3, [r7, #32]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e32:	623b      	str	r3, [r7, #32]
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc90      	pop	{r4, r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	08003bc4 	.word	0x08003bc4
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	007a1200 	.word	0x007a1200
 8002e50:	003d0900 	.word	0x003d0900

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff2 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08003be4 	.word	0x08003be4

08002e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <RCC_Delay+0x34>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <RCC_Delay+0x38>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0a5b      	lsrs	r3, r3, #9
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eac:	bf00      	nop
  }
  while (Delay --);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <RCC_Delay+0x1c>
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e041      	b.n	8002f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fb64 	bl	80005c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 faaa 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e041      	b.n	8003000 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f839 	bl	8003008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f000 fa5b 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_TIM_PWM_Start+0x24>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e022      	b.n	8003086 <HAL_TIM_PWM_Start+0x6a>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d109      	bne.n	800305a <HAL_TIM_PWM_Start+0x3e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e015      	b.n	8003086 <HAL_TIM_PWM_Start+0x6a>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d109      	bne.n	8003074 <HAL_TIM_PWM_Start+0x58>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e008      	b.n	8003086 <HAL_TIM_PWM_Start+0x6a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b01      	cmp	r3, #1
 800307e:	bf14      	ite	ne
 8003080:	2301      	movne	r3, #1
 8003082:	2300      	moveq	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e05e      	b.n	800314c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_TIM_PWM_Start+0x82>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800309c:	e013      	b.n	80030c6 <HAL_TIM_PWM_Start+0xaa>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PWM_Start+0x92>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ac:	e00b      	b.n	80030c6 <HAL_TIM_PWM_Start+0xaa>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d104      	bne.n	80030be <HAL_TIM_PWM_Start+0xa2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030bc:	e003      	b.n	80030c6 <HAL_TIM_PWM_Start+0xaa>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fc48 	bl	8003964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_TIM_PWM_Start+0x138>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d107      	bne.n	80030ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_TIM_PWM_Start+0x138>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00e      	beq.n	8003116 <HAL_TIM_PWM_Start+0xfa>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d009      	beq.n	8003116 <HAL_TIM_PWM_Start+0xfa>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a14      	ldr	r2, [pc, #80]	; (8003158 <HAL_TIM_PWM_Start+0x13c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_TIM_PWM_Start+0xfa>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <HAL_TIM_PWM_Start+0x140>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d111      	bne.n	800313a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d010      	beq.n	800314a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	e007      	b.n	800314a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800

08003160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003176:	2302      	movs	r3, #2
 8003178:	e0ac      	b.n	80032d4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	f200 809f 	bhi.w	80032c8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080032c9 	.word	0x080032c9
 8003198:	080032c9 	.word	0x080032c9
 800319c:	080032c9 	.word	0x080032c9
 80031a0:	08003205 	.word	0x08003205
 80031a4:	080032c9 	.word	0x080032c9
 80031a8:	080032c9 	.word	0x080032c9
 80031ac:	080032c9 	.word	0x080032c9
 80031b0:	08003247 	.word	0x08003247
 80031b4:	080032c9 	.word	0x080032c9
 80031b8:	080032c9 	.word	0x080032c9
 80031bc:	080032c9 	.word	0x080032c9
 80031c0:	08003287 	.word	0x08003287
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f9ac 	bl	8003528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6999      	ldr	r1, [r3, #24]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	619a      	str	r2, [r3, #24]
      break;
 8003202:	e062      	b.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f9f2 	bl	80035f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6999      	ldr	r1, [r3, #24]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	619a      	str	r2, [r3, #24]
      break;
 8003244:	e041      	b.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fa3b 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0208 	orr.w	r2, r2, #8
 8003260:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0204 	bic.w	r2, r2, #4
 8003270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	61da      	str	r2, [r3, #28]
      break;
 8003284:	e021      	b.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa85 	bl	800379c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69d9      	ldr	r1, [r3, #28]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	021a      	lsls	r2, r3, #8
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	61da      	str	r2, [r3, #28]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80032c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_TIM_ConfigClockSource+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0b3      	b.n	800345c <HAL_TIM_ConfigClockSource+0x180>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003312:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332c:	d03e      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0xd0>
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003332:	f200 8087 	bhi.w	8003444 <HAL_TIM_ConfigClockSource+0x168>
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	f000 8085 	beq.w	8003448 <HAL_TIM_ConfigClockSource+0x16c>
 800333e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003342:	d87f      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d01a      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xa2>
 8003348:	2b70      	cmp	r3, #112	; 0x70
 800334a:	d87b      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d050      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0x116>
 8003350:	2b60      	cmp	r3, #96	; 0x60
 8003352:	d877      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d03c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xf6>
 8003358:	2b50      	cmp	r3, #80	; 0x50
 800335a:	d873      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d058      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x136>
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d86f      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d064      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x156>
 8003368:	2b30      	cmp	r3, #48	; 0x30
 800336a:	d86b      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d060      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x156>
 8003370:	2b20      	cmp	r3, #32
 8003372:	d867      	bhi.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05c      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x156>
 8003378:	2b10      	cmp	r3, #16
 800337a:	d05a      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800337c:	e062      	b.n	8003444 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6899      	ldr	r1, [r3, #8]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f000 faca 	bl	8003926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	609a      	str	r2, [r3, #8]
      break;
 80033aa:	e04e      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f000 fab3 	bl	8003926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ce:	609a      	str	r2, [r3, #8]
      break;
 80033d0:	e03b      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	461a      	mov	r2, r3
 80033e0:	f000 fa2a 	bl	8003838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2150      	movs	r1, #80	; 0x50
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fa81 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80033f0:	e02b      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 fa48 	bl	8003894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2160      	movs	r1, #96	; 0x60
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fa71 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003410:	e01b      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f000 fa0a 	bl	8003838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa61 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003430:	e00b      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f000 fa58 	bl	80038f2 <TIM_ITRx_SetConfig>
        break;
 8003442:	e002      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003444:	bf00      	nop
 8003446:	e000      	b.n	800344a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003448:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <TIM_Base_SetConfig+0xb8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a26      	ldr	r2, [pc, #152]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0x30>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d108      	bne.n	80034a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	; (800351c <TIM_Base_SetConfig+0xb8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d007      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d003      	beq.n	80034c6 <TIM_Base_SetConfig+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d108      	bne.n	80034d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <TIM_Base_SetConfig+0xb8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800

08003528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f023 0302 	bic.w	r3, r3, #2
 8003570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <TIM_OC1_SetConfig+0xc8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d10c      	bne.n	800359e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f023 0308 	bic.w	r3, r3, #8
 800358a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 0304 	bic.w	r3, r3, #4
 800359c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <TIM_OC1_SetConfig+0xc8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0210 	bic.w	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <TIM_OC2_SetConfig+0xd0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10d      	bne.n	8003670 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <TIM_OC2_SetConfig+0xd0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d113      	bne.n	80036a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10d      	bne.n	8003742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800372c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <TIM_OC3_SetConfig+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d113      	bne.n	8003772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40012c00 	.word	0x40012c00

0800379c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	031b      	lsls	r3, r3, #12
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <TIM_OC4_SetConfig+0x98>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d109      	bne.n	8003810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	019b      	lsls	r3, r3, #6
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00

08003838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 030a 	bic.w	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0210 	bic.w	r2, r3, #16
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	031b      	lsls	r3, r3, #12
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	621a      	str	r2, [r3, #32]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	431a      	orrs	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4313      	orrs	r3, r2
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	609a      	str	r2, [r3, #8]
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2201      	movs	r2, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1a      	ldr	r2, [r3, #32]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e046      	b.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d009      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a10      	ldr	r2, [pc, #64]	; (8003a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10c      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800

08003a68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e03d      	b.n	8003b00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
	...

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2600      	movs	r6, #0
 8003b10:	4d0c      	ldr	r5, [pc, #48]	; (8003b44 <__libc_init_array+0x38>)
 8003b12:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	f000 f83c 	bl	8003b98 <_init>
 8003b20:	2600      	movs	r6, #0
 8003b22:	4d0a      	ldr	r5, [pc, #40]	; (8003b4c <__libc_init_array+0x40>)
 8003b24:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x44>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003bec 	.word	0x08003bec
 8003b48:	08003bec 	.word	0x08003bec
 8003b4c:	08003bec 	.word	0x08003bec
 8003b50:	08003bf0 	.word	0x08003bf0

08003b54 <memmove>:
 8003b54:	4288      	cmp	r0, r1
 8003b56:	b510      	push	{r4, lr}
 8003b58:	eb01 0402 	add.w	r4, r1, r2
 8003b5c:	d902      	bls.n	8003b64 <memmove+0x10>
 8003b5e:	4284      	cmp	r4, r0
 8003b60:	4623      	mov	r3, r4
 8003b62:	d807      	bhi.n	8003b74 <memmove+0x20>
 8003b64:	1e43      	subs	r3, r0, #1
 8003b66:	42a1      	cmp	r1, r4
 8003b68:	d008      	beq.n	8003b7c <memmove+0x28>
 8003b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b72:	e7f8      	b.n	8003b66 <memmove+0x12>
 8003b74:	4601      	mov	r1, r0
 8003b76:	4402      	add	r2, r0
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d100      	bne.n	8003b7e <memmove+0x2a>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b86:	e7f7      	b.n	8003b78 <memmove+0x24>

08003b88 <memset>:
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4402      	add	r2, r0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memset+0xa>
 8003b90:	4770      	bx	lr
 8003b92:	f803 1b01 	strb.w	r1, [r3], #1
 8003b96:	e7f9      	b.n	8003b8c <memset+0x4>

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
